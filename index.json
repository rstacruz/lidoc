{
  "pages": {
    "Welcome to Lidoc": {
      "title": "Welcome to Lidoc",
      "htmlFile": "README.md",
      "headings": [
        {
          "level": 2,
          "title": "Usage",
          "anchor": "Usage",
          "htmlFile": "index.html"
        },
        {
          "level": 2,
          "title": "The lidoc standard",
          "anchor": "The-lidoc-standard",
          "htmlFile": "index.html"
        },
        {
          "level": 2,
          "title": "Acknowledgements",
          "anchor": "Acknowledgements",
          "htmlFile": "index.html"
        }
      ]
    },
    "To do": {
      "title": "To do",
      "htmlFile": "TODO.md",
      "headings": []
    },
    "Guides": {
      "title": "Guides",
      "htmlFile": "manual/guides.md",
      "headings": [
        {
          "level": 2,
          "title": "Makefiles",
          "anchor": "Makefiles",
          "htmlFile": "manual/guides.html"
        },
        {
          "level": 2,
          "title": "Working with Git",
          "anchor": "Working-with-Git",
          "htmlFile": "manual/guides.html"
        },
        {
          "level": 2,
          "title": "Github integration",
          "anchor": "Github-integration",
          "htmlFile": "manual/guides.html"
        }
      ]
    },
    "Lidoc": {
      "title": "Lidoc",
      "htmlFile": "lib/lidoc.coffee",
      "headings": [
        {
          "level": 3,
          "title": "parse()",
          "anchor": "parse",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "build()",
          "anchor": "build",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "version",
          "anchor": "version",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 2,
          "title": "Classes",
          "anchor": "Classes",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "Filetree",
          "anchor": "Filetree",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 2,
          "title": "Structures",
          "anchor": "Structures",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "Page",
          "anchor": "Page",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "File",
          "anchor": "File",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "Section",
          "anchor": "Section",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "Project",
          "anchor": "Project",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "Heading",
          "anchor": "Heading",
          "htmlFile": "lib/lidoc.html"
        }
      ]
    },
    "Lidoc.Builder": {
      "title": "Lidoc.Builder",
      "htmlFile": "lib/lidoc/builder.coffee",
      "headings": [
        {
          "level": 3,
          "title": "build()",
          "anchor": "build",
          "htmlFile": "lib/lidoc/builder.html"
        },
        {
          "level": 3,
          "title": "writeCSS()",
          "anchor": "writeCSS",
          "htmlFile": "lib/lidoc/builder.html"
        },
        {
          "level": 3,
          "title": "writeAssets()",
          "anchor": "writeAssets",
          "htmlFile": "lib/lidoc/builder.html"
        },
        {
          "level": 3,
          "title": "writeFiles()",
          "anchor": "writeFiles",
          "htmlFile": "lib/lidoc/builder.html"
        }
      ]
    },
    "Lidoc.Command": {
      "title": "Lidoc.Command",
      "htmlFile": "lib/lidoc/command.coffee",
      "headings": [
        {
          "level": 3,
          "title": "getOptions()",
          "anchor": "getOptions",
          "htmlFile": "lib/lidoc/command.html"
        },
        {
          "level": 3,
          "title": "work()",
          "anchor": "work",
          "htmlFile": "lib/lidoc/command.html"
        }
      ]
    },
    "Lidoc.Filetree": {
      "title": "Lidoc.Filetree",
      "htmlFile": "lib/lidoc/filetree.coffee",
      "headings": [
        {
          "level": 3,
          "title": "buildFrom()",
          "anchor": "buildFrom",
          "htmlFile": "lib/lidoc/filetree.html"
        },
        {
          "level": 3,
          "title": "sort()",
          "anchor": "sort",
          "htmlFile": "lib/lidoc/filetree.html"
        }
      ]
    },
    "Lidoc.Helpers": {
      "title": "Lidoc.Helpers",
      "htmlFile": "lib/lidoc/helpers.coffee",
      "headings": [
        {
          "level": 3,
          "title": "getResource()",
          "anchor": "getResource",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "template()",
          "anchor": "template",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "slugify()",
          "anchor": "slugify",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "changeExtension()",
          "anchor": "changeExtension",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "getFileDepth()",
          "anchor": "getFileDepth",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "strRepeat()",
          "anchor": "strRepeat",
          "htmlFile": "lib/lidoc/helpers.html"
        }
      ]
    },
    "Lidoc.Languages": {
      "title": "Lidoc.Languages",
      "htmlFile": "lib/lidoc/languages.coffee",
      "headings": [
        {
          "level": 3,
          "title": "languages",
          "anchor": "languages",
          "htmlFile": "lib/lidoc/languages.html"
        },
        {
          "level": 3,
          "title": "getLanguage()",
          "anchor": "getLanguage",
          "htmlFile": "lib/lidoc/languages.html"
        }
      ]
    },
    "Lidoc.Parser": {
      "title": "Lidoc.Parser",
      "htmlFile": "lib/lidoc/parser.coffee",
      "headings": [
        {
          "level": 3,
          "title": "parse()",
          "anchor": "parse",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 2,
          "title": "Private API",
          "anchor": "Private-API",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "Project::buildIndices()",
          "anchor": "Project-buildIndices",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "File.create()",
          "anchor": "File-create",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "File::highlight()",
          "anchor": "File-highlight",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "File::addHeadings()",
          "anchor": "File-addHeadings",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "parseCode()",
          "anchor": "parseCode",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "Page.createAll()",
          "anchor": "Page-createAll",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "Section::buildHeadings()",
          "anchor": "Section-buildHeadings",
          "htmlFile": "lib/lidoc/parser.html"
        }
      ]
    },
    "Lidoc.Structs": {
      "title": "Lidoc.Structs",
      "htmlFile": "lib/lidoc/structs.coffee",
      "headings": [
        {
          "level": 2,
          "title": "Struct",
          "anchor": "Struct",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "Project",
          "anchor": "Project",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "Page",
          "anchor": "Page",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "Heading",
          "anchor": "Heading",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "File",
          "anchor": "File",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "Section",
          "anchor": "Section",
          "htmlFile": "lib/lidoc/structs.html"
        }
      ]
    }
  },
  "files": {
    "README.md": {
      "htmlFile": "index.html",
      "sourceName": null,
      "extension": "md",
      "baseSourceName": null,
      "baseHtmlFile": "index.html",
      "sections": [
        {
          "docsText": "#Welcome to Lidoc\n",
          "codeText": "\n",
          "docsHtml": "<h1>Welcome to Lidoc</h1>",
          "codeHtml": "",
          "anchor": "Welcome-to-Lidoc",
          "headings": [
            {
              "level": 1,
              "title": "Welcome to Lidoc",
              "anchor": "Welcome-to-Lidoc",
              "htmlFile": "index.html"
            }
          ]
        },
        {
          "docsText": "**Lidoc** generates literate programming documentation from your code\npainlessly.\n",
          "codeText": "\n",
          "docsHtml": "<p><strong>Lidoc</strong> generates literate programming documentation from your code\npainlessly.</p>",
          "codeHtml": "",
          "anchor": "section-1",
          "headings": []
        },
        {
          "docsText": "It takes any code project, parses its inline comments, and and generates\ndocumentation in the form of a gorgeous-looking, standalone HTML package like\nthis one.\n",
          "codeText": "\n",
          "docsHtml": "<p>It takes any code project, parses its inline comments, and and generates\ndocumentation in the form of a gorgeous-looking, standalone HTML package like\nthis one.</p>",
          "codeHtml": "",
          "anchor": "section-2",
          "headings": []
        },
        {
          "docsText": "Lidoc is code-agnostic; it doesn't care about your code at all, just the\ncomments.  As a result, it supports Python, PHP, Ruby, CoffeeScript, JavaScript,\nand just about anything that supports comments.\n",
          "codeText": "\n",
          "docsHtml": "<p>Lidoc is code-agnostic; it doesn't care about your code at all, just the\ncomments.  As a result, it supports Python, PHP, Ruby, CoffeeScript, JavaScript,\nand just about anything that supports comments.</p>",
          "codeHtml": "",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "Heavily inspired by [jashkenas/docco](https://github.com/jashkenas/docco), which\nthis project actually takes code from.\n",
          "codeText": "\n",
          "docsHtml": "<p>Heavily inspired by <a href=\"https://github.com/jashkenas/docco\">jashkenas/docco</a>, which\nthis project actually takes code from.</p>",
          "codeHtml": "",
          "anchor": "section-4",
          "headings": []
        },
        {
          "docsText": "Usage\n-----\n",
          "codeText": "\n",
          "docsHtml": "<h2>Usage</h2>",
          "codeHtml": "",
          "anchor": "Usage",
          "headings": [
            {
              "level": 2,
              "title": "Usage",
              "anchor": "Usage",
              "htmlFile": "index.html"
            }
          ]
        },
        {
          "docsText": "Build documentation like so:\n",
          "codeText": "\n",
          "docsHtml": "<p>Build documentation like so:</p>",
          "codeHtml": "",
          "anchor": "section-6",
          "headings": []
        },
        {
          "docsText": "    $ lidoc **/*.js --output docs\n",
          "codeText": "\n",
          "docsHtml": "<pre><code>$ lidoc **/*.js --output docs\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-7",
          "headings": []
        },
        {
          "docsText": "Or you can view the documentation index as a JSON file like so:\n",
          "codeText": "\n",
          "docsHtml": "<p>Or you can view the documentation index as a JSON file like so:</p>",
          "codeHtml": "",
          "anchor": "section-8",
          "headings": []
        },
        {
          "docsText": "    $ lidoc **/*.js --index\n",
          "codeText": "\n",
          "docsHtml": "<pre><code>$ lidoc **/*.js --index\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-9",
          "headings": []
        },
        {
          "docsText": "The lidoc standard\n------------------\n",
          "codeText": "\n",
          "docsHtml": "<h2>The lidoc standard</h2>",
          "codeHtml": "",
          "anchor": "The-lidoc-standard",
          "headings": [
            {
              "level": 2,
              "title": "The lidoc standard",
              "anchor": "The-lidoc-standard",
              "htmlFile": "index.html"
            }
          ]
        },
        {
          "docsText": "The lidoc standard is extremely simple and doesn't prescribe any way for you to\ndefine methods or arguments or anything.\n",
          "codeText": "\n",
          "docsHtml": "<p>The lidoc standard is extremely simple and doesn't prescribe any way for you to\ndefine methods or arguments or anything.</p>",
          "codeHtml": "",
          "anchor": "section-11",
          "headings": []
        },
        {
          "docsText": "It is aimed to be primarily human-readable; machine-parsability is of a lesser\nconcern.\n",
          "codeText": "\n",
          "docsHtml": "<p>It is aimed to be primarily human-readable; machine-parsability is of a lesser\nconcern.</p>",
          "codeHtml": "",
          "anchor": "section-12",
          "headings": []
        },
        {
          "docsText": "This documentation assumes CoffeeScript for examples. However, the standard can\napply to any code language that can support comments.\n",
          "codeText": "\n",
          "docsHtml": "<p>This documentation assumes CoffeeScript for examples. However, the standard can\napply to any code language that can support comments.</p>",
          "codeHtml": "",
          "anchor": "section-13",
          "headings": []
        },
        {
          "docsText": "#### Add Markdown comments to your project files in single-line comments.\n",
          "codeText": "\n",
          "docsHtml": "<h4>Add Markdown comments to your project files in single-line comments.</h4>",
          "codeHtml": "",
          "anchor": "Add-Markdown-comments-to-your-project-files-in-single-line-comments",
          "headings": []
        },
        {
          "docsText": "You can use all supported Markdown on comments. These comments will be the\ndocumentation.\n",
          "codeText": "\n",
          "docsHtml": "<p>You can use all supported Markdown on comments. These comments will be the\ndocumentation.</p>",
          "codeHtml": "",
          "anchor": "section-15",
          "headings": []
        },
        {
          "docsText": "These should be done with single-line comments.\n",
          "codeText": "\n",
          "docsHtml": "<p>These should be done with single-line comments.</p>",
          "codeHtml": "",
          "anchor": "section-16",
          "headings": []
        },
        {
          "docsText": " * This is `//` in JavaScript, C, PHP, and others.\n * This is `#` in Python, CoffeeScript, Ruby, and so on.\n",
          "codeText": "\n",
          "docsHtml": "<ul>\n<li>This is <code>//</code> in JavaScript, C, PHP, and others.</li>\n<li>This is <code>#</code> in Python, CoffeeScript, Ruby, and so on.</li>\n</ul>",
          "codeHtml": "",
          "anchor": "section-17",
          "headings": []
        },
        {
          "docsText": "#### Any H1 block signifies a page.\n",
          "codeText": "\n",
          "docsHtml": "<h4>Any H1 block signifies a page.</h4>",
          "codeHtml": "",
          "anchor": "Any-H1-block-signifies-a-page",
          "headings": []
        },
        {
          "docsText": "Any first H1 encounted in a file will be counted as a 'page'. Any content under\nit, until a new H1 is found, or until the end of file is reached, is counted as\ncontent of that page.\n",
          "codeText": "\n",
          "docsHtml": "<p>Any first H1 encounted in a file will be counted as a 'page'. Any content under\nit, until a new H1 is found, or until the end of file is reached, is counted as\ncontent of that page.</p>",
          "codeHtml": "",
          "anchor": "section-19",
          "headings": []
        },
        {
          "docsText": "This is done by the markdown instruction `#`.\n",
          "codeText": "\n",
          "docsHtml": "<p>This is done by the markdown instruction <code>#</code>.</p>",
          "codeHtml": "",
          "anchor": "section-20",
          "headings": []
        },
        {
          "docsText": "    # # Parser\n    \n    # This is the parser.\n    # It gets a bunch of things and outputs a bunch of stuff.\n    \n    class Parser\n    \n      # ### parse()\n    \n      # Performs parsing on the given string.\n    \n      parse: (string) ->\n",
          "codeText": "\n",
          "docsHtml": "<pre><code># # Parser\n\n# This is the parser.\n# It gets a bunch of things and outputs a bunch of stuff.\n\nclass Parser\n\n  # ### parse()\n\n  # Performs parsing on the given string.\n\n  parse: (string) -&gt;\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-21",
          "headings": []
        },
        {
          "docsText": "#### Use H2 and H3 headings for sections.\n",
          "codeText": "\n",
          "docsHtml": "<h4>Use H2 and H3 headings for sections.</h4>",
          "codeHtml": "",
          "anchor": "Use-H2-and-H3-headings-for-sections",
          "headings": []
        },
        {
          "docsText": "H3's are recommended for methods.\n",
          "codeText": "\n",
          "docsHtml": "<p>H3's are recommended for methods.</p>",
          "codeHtml": "",
          "anchor": "section-23",
          "headings": []
        },
        {
          "docsText": "    # ### getDiscountedPrice()\n    \n    # Applies merchant-specific discounts to the product and\n    # returns the discounted price as a number.\n    #\n    #     product.setPrice(20.00);\n    #     merchant.setDiscount(0.10);\n    #\n    #     product.getDiscountedPrice();\n    #     //=> 18.00\n    #\n    getDiscountedPrice: ->\n      @price * (1.00 - @merchant.discount)\n",
          "codeText": "\n",
          "docsHtml": "<pre><code># ### getDiscountedPrice()\n\n# Applies merchant-specific discounts to the product and\n# returns the discounted price as a number.\n#\n#     product.setPrice(20.00);\n#     merchant.setDiscount(0.10);\n#\n#     product.getDiscountedPrice();\n#     //=&gt; 18.00\n#\ngetDiscountedPrice: -&gt;\n  @price * (1.00 - @merchant.discount)\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-24",
          "headings": []
        },
        {
          "docsText": "Acknowledgements\n----------------\n",
          "codeText": "\n",
          "docsHtml": "<h2>Acknowledgements</h2>",
          "codeHtml": "",
          "anchor": "Acknowledgements",
          "headings": [
            {
              "level": 2,
              "title": "Acknowledgements",
              "anchor": "Acknowledgements",
              "htmlFile": "index.html"
            }
          ]
        },
        {
          "docsText": "© 2012, Rico Sta. Cruz. Released under the [MIT \nLicense](http://www.opensource.org/licenses/mit-license.php).\n",
          "codeText": "\n",
          "docsHtml": "<p>© 2012, Rico Sta. Cruz. Released under the <a href=\"http://www.opensource.org/licenses/mit-license.php\">MIT \nLicense</a>.</p>",
          "codeHtml": "",
          "anchor": "section-26",
          "headings": []
        },
        {
          "docsText": "**Lidoc** is authored and maintained by [Rico Sta. Cruz](http://ricostacruz.com)\nwith help from its [contributors](http://github.com/rstacruz/lidoc/contributors).\nIt is sponsored by my startup, [Nadarei, Inc](http://nadarei.co).\n",
          "codeText": "\n",
          "docsHtml": "<p><strong>Lidoc</strong> is authored and maintained by <a href=\"http://ricostacruz.com\">Rico Sta. Cruz</a>\nwith help from its <a href=\"http://github.com/rstacruz/lidoc/contributors\">contributors</a>.\nIt is sponsored by my startup, <a href=\"http://nadarei.co\">Nadarei, Inc</a>.</p>",
          "codeHtml": "",
          "anchor": "section-27",
          "headings": []
        },
        {
          "docsText": " * [My website](http://ricostacruz.com) (ricostacruz.com)\n * [Nadarei, Inc.](http://nadarei.co) (nadarei.co)\n * [Github](http://github.com/rstacruz) (@rstacruz)\n * [Twitter](http://twitter.com/rstacruz) (@rstacruz)\n",
          "codeText": "\n",
          "docsHtml": "<ul>\n<li><a href=\"http://ricostacruz.com\">My website</a> (ricostacruz.com)</li>\n<li><a href=\"http://nadarei.co\">Nadarei, Inc.</a> (nadarei.co)</li>\n<li><a href=\"http://github.com/rstacruz\">Github</a> (@rstacruz)</li>\n<li><a href=\"http://twitter.com/rstacruz\">Twitter</a> (@rstacruz)</li>\n</ul>",
          "codeHtml": "",
          "anchor": "section-28",
          "headings": []
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "Welcome to Lidoc",
          "anchor": "Welcome-to-Lidoc",
          "htmlFile": "index.html"
        },
        {
          "level": 2,
          "title": "Usage",
          "anchor": "Usage",
          "htmlFile": "index.html"
        },
        {
          "level": 2,
          "title": "The lidoc standard",
          "anchor": "The-lidoc-standard",
          "htmlFile": "index.html"
        },
        {
          "level": 2,
          "title": "Acknowledgements",
          "anchor": "Acknowledgements",
          "htmlFile": "index.html"
        }
      ],
      "sourceFile": "README.md",
      "baseSourceFile": "README.md",
      "mainHeading": {
        "level": 1,
        "title": "Welcome to Lidoc",
        "anchor": "Welcome-to-Lidoc",
        "htmlFile": "index.html"
      }
    },
    "TODO.md": {
      "htmlFile": "TODO.html",
      "sourceName": null,
      "extension": "md",
      "baseSourceName": null,
      "baseHtmlFile": "TODO.html",
      "sections": [
        {
          "docsText": "To do\n=====\n",
          "codeText": "\n",
          "docsHtml": "<h1>To do</h1>",
          "codeHtml": "",
          "anchor": "To-do",
          "headings": [
            {
              "level": 1,
              "title": "To do",
              "anchor": "To-do",
              "htmlFile": "TODO.html"
            }
          ]
        },
        {
          "docsText": " * Fork me on Github\n * Custom HTML\n * Page hierarchy\n * JS searching\n",
          "codeText": "\n",
          "docsHtml": "<ul>\n<li>Fork me on Github</li>\n<li>Custom HTML</li>\n<li>Page hierarchy</li>\n<li>JS searching</li>\n</ul>",
          "codeHtml": "",
          "anchor": "section-1",
          "headings": []
        },
        {
          "docsText": "Later:\n",
          "codeText": "\n",
          "docsHtml": "<p>Later:</p>",
          "codeHtml": "",
          "anchor": "section-2",
          "headings": []
        },
        {
          "docsText": " * Proper `.md` integration\n * For files with no comments\n * Syntax highlighting of `<pre>`\n * Linking of `{Foo}` references\n",
          "codeText": "\n",
          "docsHtml": "<ul>\n<li>Proper <code>.md</code> integration</li>\n<li>For files with no comments</li>\n<li>Syntax highlighting of <code>&lt;pre&gt;</code></li>\n<li>Linking of <code>{Foo}</code> references</li>\n</ul>",
          "codeHtml": "",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "Done\n",
          "codeText": "\n",
          "docsHtml": "<p>Done</p>",
          "codeHtml": "",
          "anchor": "section-4",
          "headings": []
        },
        {
          "docsText": " * Expandable file list\n * Link to Github file\n * JS pages/files switch\n * Custom CSS\n * 'Files' tab should stay even when clicked\n * 'Files' should be a tree\n * Show file path in page\n * Make Markdown pages look better\n",
          "codeText": "\n\n",
          "docsHtml": "<ul>\n<li>Expandable file list</li>\n<li>Link to Github file</li>\n<li>JS pages/files switch</li>\n<li>Custom CSS</li>\n<li>'Files' tab should stay even when clicked</li>\n<li>'Files' should be a tree</li>\n<li>Show file path in page</li>\n<li>Make Markdown pages look better</li>\n</ul>",
          "codeHtml": "",
          "anchor": "section-5",
          "headings": []
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "To do",
          "anchor": "To-do",
          "htmlFile": "TODO.html"
        }
      ],
      "sourceFile": "TODO.md",
      "baseSourceFile": "TODO.md",
      "mainHeading": {
        "level": 1,
        "title": "To do",
        "anchor": "To-do",
        "htmlFile": "TODO.html"
      }
    },
    "manual/guides.md": {
      "htmlFile": "manual/guides.html",
      "sourceName": null,
      "extension": "md",
      "baseSourceName": null,
      "baseHtmlFile": "guides.html",
      "sections": [
        {
          "docsText": "Guides\n======\n",
          "codeText": "\n",
          "docsHtml": "<h1>Guides</h1>",
          "codeHtml": "",
          "anchor": "Guides",
          "headings": [
            {
              "level": 1,
              "title": "Guides",
              "anchor": "Guides",
              "htmlFile": "manual/guides.html"
            }
          ]
        },
        {
          "docsText": "Because I'm helpful tool.\n",
          "codeText": "\n",
          "docsHtml": "<p>Because I'm helpful tool.</p>",
          "codeHtml": "",
          "anchor": "section-1",
          "headings": []
        },
        {
          "docsText": "Makefiles\n---------\n",
          "codeText": "\n",
          "docsHtml": "<h2>Makefiles</h2>",
          "codeHtml": "",
          "anchor": "Makefiles",
          "headings": [
            {
              "level": 2,
              "title": "Makefiles",
              "anchor": "Makefiles",
              "htmlFile": "manual/guides.html"
            }
          ]
        },
        {
          "docsText": "All of Lidoc's options are passed via the command line: `lidoc *.js --output\ndocs`. When you have many files, this can get cumbersome and hard to remember.\n",
          "codeText": "\n",
          "docsHtml": "<p>All of Lidoc's options are passed via the command line: <code>lidoc *.js --output\ndocs</code>. When you have many files, this can get cumbersome and hard to remember.</p>",
          "codeHtml": "",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "It may be best to create a `Makefile` to automate documentation generation for\nyou.\n",
          "codeText": "\n",
          "docsHtml": "<p>It may be best to create a <code>Makefile</code> to automate documentation generation for\nyou.</p>",
          "codeHtml": "",
          "anchor": "section-4",
          "headings": []
        },
        {
          "docsText": "#### Creating the makefile\n",
          "codeText": "\n",
          "docsHtml": "<h4>Creating the makefile</h4>",
          "codeHtml": "",
          "anchor": "Creating-the-makefile",
          "headings": []
        },
        {
          "docsText": "Create a file called `Makefile`.\n",
          "codeText": "\n",
          "docsHtml": "<p>Create a file called <code>Makefile</code>.</p>",
          "codeHtml": "",
          "anchor": "section-6",
          "headings": []
        },
        {
          "docsText": "    # Makefile\n    LIDOC := ./node_modules/lidoc/bin/lidoc\n    \n    # Define the files you need as input here.\n    docs: README.md lib/*.js lib/**/*.js\n      rm -rf $@\n      $(LIDOC) $^ --output $@\n",
          "codeText": "\n",
          "docsHtml": "<pre><code># Makefile\nLIDOC := ./node_modules/lidoc/bin/lidoc\n\n# Define the files you need as input here.\ndocs: README.md lib/*.js lib/**/*.js\n  rm -rf $@\n  $(LIDOC) $^ --output $@\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-7",
          "headings": []
        },
        {
          "docsText": "In GNU Make, the `$@` variable refers to the file being built (in this case,\n`docs`) and `$^` refers to its dependencies (in this case, `README.md` et al).\n",
          "codeText": "\n",
          "docsHtml": "<p>In GNU Make, the <code>$@</code> variable refers to the file being built (in this case,\n<code>docs</code>) and <code>$^</code> refers to its dependencies (in this case, <code>README.md</code> et al).</p>",
          "codeHtml": "",
          "anchor": "section-8",
          "headings": []
        },
        {
          "docsText": "#### Invoking it\n",
          "codeText": "\n",
          "docsHtml": "<h4>Invoking it</h4>",
          "codeHtml": "",
          "anchor": "Invoking-it",
          "headings": []
        },
        {
          "docsText": "To build your documentation, simply type:\n",
          "codeText": "\n",
          "docsHtml": "<p>To build your documentation, simply type:</p>",
          "codeHtml": "",
          "anchor": "section-10",
          "headings": []
        },
        {
          "docsText": "    $ make docs\n",
          "codeText": "\n",
          "docsHtml": "<pre><code>$ make docs\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-11",
          "headings": []
        },
        {
          "docsText": "Working with Git\n----------------\n",
          "codeText": "\n",
          "docsHtml": "<h2>Working with Git</h2>",
          "codeHtml": "",
          "anchor": "Working-with-Git",
          "headings": [
            {
              "level": 2,
              "title": "Working with Git",
              "anchor": "Working-with-Git",
              "htmlFile": "manual/guides.html"
            }
          ]
        },
        {
          "docsText": "Some people like to commit their generated documentation in their project\nrepositories. However, if you're a fan of Github's graphs (or any repository\nanalysis tool for that matter), this will pollute your statistics and\nunnecessarily bloat up the number of commits you do.\n",
          "codeText": "\n",
          "docsHtml": "<p>Some people like to commit their generated documentation in their project\nrepositories. However, if you're a fan of Github's graphs (or any repository\nanalysis tool for that matter), this will pollute your statistics and\nunnecessarily bloat up the number of commits you do.</p>",
          "codeHtml": "",
          "anchor": "section-13",
          "headings": []
        },
        {
          "docsText": "#### Committing with a different author\n",
          "codeText": "\n",
          "docsHtml": "<h4>Committing with a different author</h4>",
          "codeHtml": "",
          "anchor": "Committing-with-a-different-author",
          "headings": []
        },
        {
          "docsText": "The solution is to commit with a different author.\n",
          "codeText": "\n",
          "docsHtml": "<p>The solution is to commit with a different author.</p>",
          "codeHtml": "",
          "anchor": "section-15",
          "headings": []
        },
        {
          "docsText": "    lidoc lib/**/*.js --output docs\n    git add docs\n    git commit -m \"Update documentation.\" --author \"Nobody <nobody@localhost>\"\n",
          "codeText": "\n",
          "docsHtml": "<pre><code>lidoc lib/**/*.js --output docs\ngit add docs\ngit commit -m \"Update documentation.\" --author \"Nobody &lt;nobody@localhost&gt;\"\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-16",
          "headings": []
        },
        {
          "docsText": "#### Integrating with `make`\n",
          "codeText": "\n",
          "docsHtml": "<h4>Integrating with <code>make</code></h4>",
          "codeHtml": "",
          "anchor": "Integrating-with-code-make-code",
          "headings": []
        },
        {
          "docsText": "In fact, you may want to integrate this into your Makefile.\n",
          "codeText": "\n",
          "docsHtml": "<p>In fact, you may want to integrate this into your Makefile.</p>",
          "codeHtml": "",
          "anchor": "section-18",
          "headings": []
        },
        {
          "docsText": "    # Makefile\n    NOBODY := \"Nobody <nobody@localhost>\"\n    \n    docs-commit: docs\n      git add docs\n      git commit -m \"Update documentation.\" --author \"$(NOBODY)\"\n    \n    .PHONY: docs-commit\n",
          "codeText": "\n",
          "docsHtml": "<pre><code># Makefile\nNOBODY := \"Nobody &lt;nobody@localhost&gt;\"\n\ndocs-commit: docs\n  git add docs\n  git commit -m \"Update documentation.\" --author \"$(NOBODY)\"\n\n.PHONY: docs-commit\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-19",
          "headings": []
        },
        {
          "docsText": "This way, you can just type:\n",
          "codeText": "\n",
          "docsHtml": "<p>This way, you can just type:</p>",
          "codeHtml": "",
          "anchor": "section-20",
          "headings": []
        },
        {
          "docsText": "    $ make docs-commit\n",
          "codeText": "\n",
          "docsHtml": "<pre><code>$ make docs-commit\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-21",
          "headings": []
        },
        {
          "docsText": "This builds your documentation (because `docs-commit` depends on `docs`) then\ncommits it under a different author.\n",
          "codeText": "\n",
          "docsHtml": "<p>This builds your documentation (because <code>docs-commit</code> depends on <code>docs</code>) then\ncommits it under a different author.</p>",
          "codeHtml": "",
          "anchor": "section-22",
          "headings": []
        },
        {
          "docsText": "Github integration\n------------------\n",
          "codeText": "\n",
          "docsHtml": "<h2>Github integration</h2>",
          "codeHtml": "",
          "anchor": "Github-integration",
          "headings": [
            {
              "level": 2,
              "title": "Github integration",
              "anchor": "Github-integration",
              "htmlFile": "manual/guides.html"
            }
          ]
        },
        {
          "docsText": "You can invoke **Lidoc** with `--github`:\n",
          "codeText": "\n",
          "docsHtml": "<p>You can invoke <strong>Lidoc</strong> with <code>--github</code>:</p>",
          "codeHtml": "",
          "anchor": "section-24",
          "headings": []
        },
        {
          "docsText": "    $ lidoc lib/**/*.js --output docs --github rstacruz/lidoc\n",
          "codeText": "\n",
          "docsHtml": "<pre><code>$ lidoc lib/**/*.js --output docs --github rstacruz/lidoc\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-25",
          "headings": []
        },
        {
          "docsText": "This gets you a *fork me on Github* button on the first page, and links to\nGithub files in the lower-left.\n",
          "codeText": "\n",
          "docsHtml": "<p>This gets you a <em>fork me on Github</em> button on the first page, and links to\nGithub files in the lower-left.</p>",
          "codeHtml": "",
          "anchor": "section-26",
          "headings": []
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "Guides",
          "anchor": "Guides",
          "htmlFile": "manual/guides.html"
        },
        {
          "level": 2,
          "title": "Makefiles",
          "anchor": "Makefiles",
          "htmlFile": "manual/guides.html"
        },
        {
          "level": 2,
          "title": "Working with Git",
          "anchor": "Working-with-Git",
          "htmlFile": "manual/guides.html"
        },
        {
          "level": 2,
          "title": "Github integration",
          "anchor": "Github-integration",
          "htmlFile": "manual/guides.html"
        }
      ],
      "sourceFile": "manual/guides.md",
      "baseSourceFile": "guides.md",
      "mainHeading": {
        "level": 1,
        "title": "Guides",
        "anchor": "Guides",
        "htmlFile": "manual/guides.html"
      }
    },
    "lib/lidoc.coffee": {
      "htmlFile": "lib/lidoc.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "lidoc.html",
      "sections": [
        {
          "docsText": "# Lidoc\n",
          "codeText": "\n",
          "docsHtml": "<h1>Lidoc</h1>",
          "codeHtml": "",
          "anchor": "Lidoc",
          "headings": [
            {
              "level": 1,
              "title": "Lidoc",
              "anchor": "Lidoc",
              "htmlFile": "lib/lidoc.html"
            }
          ]
        },
        {
          "docsText": "This is the main entry point for the entire library.\n\n    Lidoc = require('lidoc')\n\nFrom here, you can do:\n\n    Lidoc.parse files: [...], (project) ->\n      Lidoc.build project, output: 'docs', ->\n        console.log \"Done!\"\n\nSee {Builder.build()} and {Parser.parse()} for more info.\n",
          "codeText": "\nfs = require 'fs'\npath = require 'path'\n\npkg = JSON.parse fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf-8')\n\nmodule.exports =\n\n",
          "docsHtml": "<p>This is the main entry point for the entire library.</p>\n\n<pre><code>Lidoc = require('lidoc')\n</code></pre>\n\n<p>From here, you can do:</p>\n\n<pre><code>Lidoc.parse files: [...], (project) -&gt;\n  Lidoc.build project, output: 'docs', -&gt;\n    console.log \"Done!\"\n</code></pre>\n\n<p>See {Builder.build()} and {Parser.parse()} for more info.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;fs&#39;</span>\n<span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;path&#39;</span>\n\n<span class=\"nx\">pkg</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;..&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;package.json&#39;</span><span class=\"p\">),</span> <span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span></pre></div>",
          "anchor": "section-1",
          "headings": []
        },
        {
          "docsText": "### parse()\n",
          "codeText": "\n",
          "docsHtml": "<h3>parse()</h3>",
          "codeHtml": "",
          "anchor": "parse",
          "headings": [
            {
              "level": 3,
              "title": "parse()",
              "anchor": "parse",
              "htmlFile": "lib/lidoc.html"
            }
          ]
        },
        {
          "docsText": "Parses a source tree and outputs JSON. See {Parser.parse()}.\n",
          "codeText": "  parse: require('./lidoc/parser').parse\n\n",
          "docsHtml": "<p>Parses a source tree and outputs JSON. See {Parser.parse()}.</p>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nv\">parse: </span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./lidoc/parser&#39;</span><span class=\"p\">).</span><span class=\"nx\">parse</span></pre></div>",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "### build()\n",
          "codeText": "\n",
          "docsHtml": "<h3>build()</h3>",
          "codeHtml": "",
          "anchor": "build",
          "headings": [
            {
              "level": 3,
              "title": "build()",
              "anchor": "build",
              "htmlFile": "lib/lidoc.html"
            }
          ]
        },
        {
          "docsText": "Builds HTML output from a project tree built by `parse()`. See\n{Builder.build()}.\n",
          "codeText": "  build: require('./lidoc/builder').build\n\n",
          "docsHtml": "<p>Builds HTML output from a project tree built by <code>parse()</code>. See\n{Builder.build()}.</p>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nv\">build: </span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./lidoc/builder&#39;</span><span class=\"p\">).</span><span class=\"nx\">build</span></pre></div>",
          "anchor": "section-5",
          "headings": []
        },
        {
          "docsText": "### version\n",
          "codeText": "\n",
          "docsHtml": "<h3>version</h3>",
          "codeHtml": "",
          "anchor": "version",
          "headings": [
            {
              "level": 3,
              "title": "version",
              "anchor": "version",
              "htmlFile": "lib/lidoc.html"
            }
          ]
        },
        {
          "docsText": "The **Lidoc** version.\n",
          "codeText": "  version: pkg.version\n\n",
          "docsHtml": "<p>The <strong>Lidoc</strong> version.</p>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nv\">version: </span><span class=\"nx\">pkg</span><span class=\"p\">.</span><span class=\"nx\">version</span></pre></div>",
          "anchor": "section-7",
          "headings": []
        },
        {
          "docsText": "## Classes\n",
          "codeText": "\n",
          "docsHtml": "<h2>Classes</h2>",
          "codeHtml": "",
          "anchor": "Classes",
          "headings": [
            {
              "level": 2,
              "title": "Classes",
              "anchor": "Classes",
              "htmlFile": "lib/lidoc.html"
            }
          ]
        },
        {
          "docsText": "### Filetree\n",
          "codeText": "  Filetree: require('./lidoc/filetree').Filetree\n\n",
          "docsHtml": "<h3>Filetree</h3>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nv\">Filetree: </span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./lidoc/filetree&#39;</span><span class=\"p\">).</span><span class=\"nx\">Filetree</span></pre></div>",
          "anchor": "Filetree",
          "headings": [
            {
              "level": 3,
              "title": "Filetree",
              "anchor": "Filetree",
              "htmlFile": "lib/lidoc.html"
            }
          ]
        },
        {
          "docsText": "## Structures\n",
          "codeText": "\n",
          "docsHtml": "<h2>Structures</h2>",
          "codeHtml": "",
          "anchor": "Structures",
          "headings": [
            {
              "level": 2,
              "title": "Structures",
              "anchor": "Structures",
              "htmlFile": "lib/lidoc.html"
            }
          ]
        },
        {
          "docsText": "### Page\n### File\n### Section\n### Project\n### Heading\nStructures. See {Structs} for more info on each.\n",
          "codeText": "  Page: require('./lidoc/structs').Page\n  File: require('./lidoc/structs').File\n  Section: require('./lidoc/structs').Section\n  Project: require('./lidoc/structs').Project\n  Heading: require('./lidoc/structs').Heading\n\n",
          "docsHtml": "<h3>Page</h3>\n\n<h3>File</h3>\n\n<h3>Section</h3>\n\n<h3>Project</h3>\n\n<h3>Heading</h3>\n\n<p>Structures. See {Structs} for more info on each.</p>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nv\">Page: </span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./lidoc/structs&#39;</span><span class=\"p\">).</span><span class=\"nx\">Page</span>\n  <span class=\"nv\">File: </span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./lidoc/structs&#39;</span><span class=\"p\">).</span><span class=\"nx\">File</span>\n  <span class=\"nv\">Section: </span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./lidoc/structs&#39;</span><span class=\"p\">).</span><span class=\"nx\">Section</span>\n  <span class=\"nv\">Project: </span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./lidoc/structs&#39;</span><span class=\"p\">).</span><span class=\"nx\">Project</span>\n  <span class=\"nv\">Heading: </span><span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;./lidoc/structs&#39;</span><span class=\"p\">).</span><span class=\"nx\">Heading</span>\n\n</pre></div>",
          "anchor": "Heading",
          "headings": [
            {
              "level": 3,
              "title": "Page",
              "anchor": "Page",
              "htmlFile": "lib/lidoc.html"
            },
            {
              "level": 3,
              "title": "File",
              "anchor": "File",
              "htmlFile": "lib/lidoc.html"
            },
            {
              "level": 3,
              "title": "Section",
              "anchor": "Section",
              "htmlFile": "lib/lidoc.html"
            },
            {
              "level": 3,
              "title": "Project",
              "anchor": "Project",
              "htmlFile": "lib/lidoc.html"
            },
            {
              "level": 3,
              "title": "Heading",
              "anchor": "Heading",
              "htmlFile": "lib/lidoc.html"
            }
          ]
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "Lidoc",
          "anchor": "Lidoc",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "parse()",
          "anchor": "parse",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "build()",
          "anchor": "build",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "version",
          "anchor": "version",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 2,
          "title": "Classes",
          "anchor": "Classes",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "Filetree",
          "anchor": "Filetree",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 2,
          "title": "Structures",
          "anchor": "Structures",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "Page",
          "anchor": "Page",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "File",
          "anchor": "File",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "Section",
          "anchor": "Section",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "Project",
          "anchor": "Project",
          "htmlFile": "lib/lidoc.html"
        },
        {
          "level": 3,
          "title": "Heading",
          "anchor": "Heading",
          "htmlFile": "lib/lidoc.html"
        }
      ],
      "sourceFile": "lib/lidoc.coffee",
      "baseSourceFile": "lidoc.coffee",
      "mainHeading": {
        "level": 1,
        "title": "Lidoc",
        "anchor": "Lidoc",
        "htmlFile": "lib/lidoc.html"
      }
    },
    "lib/lidoc/builder.coffee": {
      "htmlFile": "lib/lidoc/builder.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "builder.html",
      "sections": [
        {
          "docsText": "# Lidoc.Builder\n",
          "codeText": "\n",
          "docsHtml": "<h1>Lidoc.Builder</h1>",
          "codeHtml": "",
          "anchor": "Lidoc-Builder",
          "headings": [
            {
              "level": 1,
              "title": "Lidoc.Builder",
              "anchor": "Lidoc-Builder",
              "htmlFile": "lib/lidoc/builder.html"
            }
          ]
        },
        {
          "docsText": "Builds HTML/CSS files.\n\n",
          "codeText": "fs = require 'fs'\npath = require 'path'\nasync = require 'async'\nmkdirp = require('mkdirp').sync\n{template, getResource, getFileDepth, strRepeat} = require './helpers'\n\n",
          "docsHtml": "<p>Builds HTML/CSS files.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;fs&#39;</span>\n<span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;path&#39;</span>\n<span class=\"nx\">async</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;async&#39;</span>\n<span class=\"nx\">mkdirp</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;mkdirp&#39;</span><span class=\"p\">).</span><span class=\"nx\">sync</span>\n<span class=\"p\">{</span><span class=\"nx\">template</span><span class=\"p\">,</span> <span class=\"nx\">getResource</span><span class=\"p\">,</span> <span class=\"nx\">getFileDepth</span><span class=\"p\">,</span> <span class=\"nx\">strRepeat</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;./helpers&#39;</span></pre></div>",
          "anchor": "section-1",
          "headings": []
        },
        {
          "docsText": "### build()\n",
          "codeText": "\n",
          "docsHtml": "<h3>build()</h3>",
          "codeHtml": "",
          "anchor": "build",
          "headings": [
            {
              "level": 3,
              "title": "build()",
              "anchor": "build",
              "htmlFile": "lib/lidoc/builder.html"
            }
          ]
        },
        {
          "docsText": "Builds the HTML/CSS files in the path in `options.output`. The argument\n`project` is something that comes from {parse()}.\n\n    options = {\n      files: ['a.js', 'b.js'],\n      output: 'docs'\n    };\n\n    project = Lidoc.parse(options);\n    Lidoc.build(project, options, callback);\n\nThis is accessible via {Lidoc#build()}.\n\n",
          "codeText": "build = (project, options, callback) ->\n",
          "docsHtml": "<p>Builds the HTML/CSS files in the path in <code>options.output</code>. The argument\n<code>project</code> is something that comes from {parse()}.</p>\n\n<pre><code>options = {\n  files: ['a.js', 'b.js'],\n  output: 'docs'\n};\n\nproject = Lidoc.parse(options);\nLidoc.build(project, options, callback);\n</code></pre>\n\n<p>This is accessible via {Lidoc#build()}.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">build</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span></pre></div>",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "- Build the output directory.\n",
          "codeText": "  mkdirp options.output\n\n  async.parallel [\n    (cb) -> writeCSS project, options, cb\n    (cb) -> writeFiles project, options, cb\n    (cb) -> writeAssets project, options, cb\n  ], callback\n\ncompileCSS = (css, callback) ->\n  stylus = require 'stylus'\n  nib = require 'nib'\n\n  stylus(css).use(nib()).render (err, actual) ->\n    if err?\n      console.warn \"\"\n      console.warn \"Stylus error (#{err.name}):\"\n      console.warn err.message\n\n    callback actual\n\n",
          "docsHtml": "<ul>\n<li>Build the output directory.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">mkdirp</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">output</span>\n\n  <span class=\"nx\">async</span><span class=\"p\">.</span><span class=\"nx\">parallel</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"nx\">cb</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nx\">writeCSS</span> <span class=\"nx\">project</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">cb</span>\n    <span class=\"p\">(</span><span class=\"nx\">cb</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nx\">writeFiles</span> <span class=\"nx\">project</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">cb</span>\n    <span class=\"p\">(</span><span class=\"nx\">cb</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nx\">writeAssets</span> <span class=\"nx\">project</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">cb</span>\n  <span class=\"p\">],</span> <span class=\"nx\">callback</span>\n\n<span class=\"nx\">compileCSS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">css</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">stylus</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;stylus&#39;</span>\n  <span class=\"nx\">nib</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;nib&#39;</span>\n\n  <span class=\"nx\">stylus</span><span class=\"p\">(</span><span class=\"nx\">css</span><span class=\"p\">).</span><span class=\"nx\">use</span><span class=\"p\">(</span><span class=\"nx\">nib</span><span class=\"p\">()).</span><span class=\"nx\">render</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">actual</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">if</span> <span class=\"nx\">err</span><span class=\"o\">?</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;&quot;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;Stylus error (#{err.name}):&quot;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"nx\">err</span><span class=\"p\">.</span><span class=\"nx\">message</span>\n\n    <span class=\"nx\">callback</span> <span class=\"nx\">actual</span></pre></div>",
          "anchor": "section-4",
          "headings": []
        },
        {
          "docsText": "### writeCSS()\n",
          "codeText": "\n",
          "docsHtml": "<h3>writeCSS()</h3>",
          "codeHtml": "",
          "anchor": "writeCSS",
          "headings": [
            {
              "level": 3,
              "title": "writeCSS()",
              "anchor": "writeCSS",
              "htmlFile": "lib/lidoc/builder.html"
            }
          ]
        },
        {
          "docsText": "Writes CSS files to the output path.\n",
          "codeText": "\nwriteCSS = (project, options, callback) ->\n",
          "docsHtml": "<p>Writes CSS files to the output path.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">writeCSS</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span></pre></div>",
          "anchor": "section-6",
          "headings": []
        },
        {
          "docsText": "- Fetch the default CSS file.\n",
          "codeText": "  css = if options.css?\n    fs.readFileSync(options.css, 'utf-8')\n  else\n    getResource('default.css')\n\n",
          "docsHtml": "<ul>\n<li>Fetch the default CSS file.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">css</span> <span class=\"o\">=</span> <span class=\"k\">if</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"o\">?</span>\n    <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">css</span><span class=\"p\">,</span> <span class=\"s1\">&#39;utf-8&#39;</span><span class=\"p\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"nx\">getResource</span><span class=\"p\">(</span><span class=\"s1\">&#39;default.css&#39;</span><span class=\"p\">)</span></pre></div>",
          "anchor": "section-7",
          "headings": []
        },
        {
          "docsText": "- Render and write it\n",
          "codeText": "  outFile = path.join(options.output, 'style.css')\n\n  compileCSS css, (data) ->\n    fs.writeFile outFile, data, ->\n      console.warn \"  > #{outFile}\"  unless options.quiet\n      callback null, true\n\n",
          "docsHtml": "<ul>\n<li>Render and write it</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">outFile</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">output</span><span class=\"p\">,</span> <span class=\"s1\">&#39;style.css&#39;</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">compileCSS</span> <span class=\"nx\">css</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFile</span> <span class=\"nx\">outFile</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;  &gt; #{outFile}&quot;</span>  <span class=\"nx\">unless</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">quiet</span>\n      <span class=\"nx\">callback</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"kc\">true</span></pre></div>",
          "anchor": "section-8",
          "headings": []
        },
        {
          "docsText": "### writeAssets()\n",
          "codeText": "\n",
          "docsHtml": "<h3>writeAssets()</h3>",
          "codeHtml": "",
          "anchor": "writeAssets",
          "headings": [
            {
              "level": 3,
              "title": "writeAssets()",
              "anchor": "writeAssets",
              "htmlFile": "lib/lidoc/builder.html"
            }
          ]
        },
        {
          "docsText": "Takes care of other assets, supposedly...\n",
          "codeText": "\nwriteAssets = (project, options, callback) ->\n  contents = getResource('script.js')\n  outFile = path.join(options.output, 'script.js')\n\n  fs.writeFile outFile, contents, ->\n    console.warn \"  > #{outFile}\"  unless options.quiet\n    callback null, true\n\ngetSourceUrl = (file, options) ->\n  if options.github? and options.gitBranch?\n    \"https://github.com/#{options.github}/blob/#{options.gitBranch}/#{file.sourceFile}\"\n  else\n    null\n\n",
          "docsHtml": "<p>Takes care of other assets, supposedly...</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">writeAssets</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">contents</span> <span class=\"o\">=</span> <span class=\"nx\">getResource</span><span class=\"p\">(</span><span class=\"s1\">&#39;script.js&#39;</span><span class=\"p\">)</span>\n  <span class=\"nx\">outFile</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">output</span><span class=\"p\">,</span> <span class=\"s1\">&#39;script.js&#39;</span><span class=\"p\">)</span>\n\n  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFile</span> <span class=\"nx\">outFile</span><span class=\"p\">,</span> <span class=\"nx\">contents</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;  &gt; #{outFile}&quot;</span>  <span class=\"nx\">unless</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">quiet</span>\n    <span class=\"nx\">callback</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"kc\">true</span>\n\n<span class=\"nx\">getSourceUrl</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"k\">if</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">github</span><span class=\"o\">?</span> <span class=\"o\">and</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">gitBranch</span><span class=\"o\">?</span>\n    <span class=\"s2\">&quot;https://github.com/#{options.github}/blob/#{options.gitBranch}/#{file.sourceFile}&quot;</span>\n  <span class=\"k\">else</span>\n    <span class=\"kc\">null</span></pre></div>",
          "anchor": "section-10",
          "headings": []
        },
        {
          "docsText": "### writeFiles()\n",
          "codeText": "\n",
          "docsHtml": "<h3>writeFiles()</h3>",
          "codeHtml": "",
          "anchor": "writeFiles",
          "headings": [
            {
              "level": 3,
              "title": "writeFiles()",
              "anchor": "writeFiles",
              "htmlFile": "lib/lidoc/builder.html"
            }
          ]
        },
        {
          "docsText": "Writes HTML files to the output path.\n",
          "codeText": "\nwriteFiles = (project, options, callback) ->\n  tpl = template(getResource('default.html'))\n  calls = []\n\n",
          "docsHtml": "<p>Writes HTML files to the output path.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">writeFiles</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">tpl</span> <span class=\"o\">=</span> <span class=\"nx\">template</span><span class=\"p\">(</span><span class=\"nx\">getResource</span><span class=\"p\">(</span><span class=\"s1\">&#39;default.html&#39;</span><span class=\"p\">))</span>\n  <span class=\"nx\">calls</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></pre></div>",
          "anchor": "section-12",
          "headings": []
        },
        {
          "docsText": "- Write each of the HTML files.\n",
          "codeText": "  for fname, file of project.files\n    outFile = path.join(options.output, file.htmlFile)\n    depth = getFileDepth(file.htmlFile)\n\n    output = tpl\n      title: file.mainHeading?.title\n      sections: file.sections\n",
          "docsHtml": "<ul>\n<li>Write each of the HTML files.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"k\">for</span> <span class=\"nx\">fname</span><span class=\"p\">,</span> <span class=\"nx\">file</span> <span class=\"k\">of</span> <span class=\"nx\">project</span><span class=\"p\">.</span><span class=\"nx\">files</span>\n    <span class=\"nx\">outFile</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">output</span><span class=\"p\">,</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">htmlFile</span><span class=\"p\">)</span>\n    <span class=\"nx\">depth</span> <span class=\"o\">=</span> <span class=\"nx\">getFileDepth</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">htmlFile</span><span class=\"p\">)</span>\n\n    <span class=\"nx\">output</span> <span class=\"o\">=</span> <span class=\"nx\">tpl</span>\n      <span class=\"nv\">title: </span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">mainHeading</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"nx\">title</span>\n      <span class=\"nv\">sections: </span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">sections</span></pre></div>",
          "anchor": "section-13",
          "headings": []
        },
        {
          "docsText": "- Prefix for For relative paths.\n",
          "codeText": "      root: strRepeat('../', depth)\n",
          "docsHtml": "<ul>\n<li>Prefix for For relative paths.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>      <span class=\"nv\">root: </span><span class=\"nx\">strRepeat</span><span class=\"p\">(</span><span class=\"s1\">&#39;../&#39;</span><span class=\"p\">,</span> <span class=\"nx\">depth</span><span class=\"p\">)</span></pre></div>",
          "anchor": "section-14",
          "headings": []
        },
        {
          "docsText": "- URL path to CSS file.\n",
          "codeText": "      css: strRepeat('../', depth) + 'style.css'\n      current:\n        file: file\n        page: {}\n      file: file\n      sourceUrl: getSourceUrl(file, options)\n      project: project\n      fileTree: project.fileTree\n      depth: depth\n      options: options\n\n",
          "docsHtml": "<ul>\n<li>URL path to CSS file.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>      <span class=\"nv\">css: </span><span class=\"nx\">strRepeat</span><span class=\"p\">(</span><span class=\"s1\">&#39;../&#39;</span><span class=\"p\">,</span> <span class=\"nx\">depth</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;style.css&#39;</span>\n      <span class=\"nv\">current:</span>\n        <span class=\"nv\">file: </span><span class=\"nx\">file</span>\n        <span class=\"nv\">page: </span><span class=\"p\">{}</span>\n      <span class=\"nv\">file: </span><span class=\"nx\">file</span>\n      <span class=\"nv\">sourceUrl: </span><span class=\"nx\">getSourceUrl</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">)</span>\n      <span class=\"nv\">project: </span><span class=\"nx\">project</span>\n      <span class=\"nv\">fileTree: </span><span class=\"nx\">project</span><span class=\"p\">.</span><span class=\"nx\">fileTree</span>\n      <span class=\"nv\">depth: </span><span class=\"nx\">depth</span>\n      <span class=\"nv\">options: </span><span class=\"nx\">options</span></pre></div>",
          "anchor": "section-15",
          "headings": []
        },
        {
          "docsText": "- Queue up the mkdir/writeFile calls.\n",
          "codeText": "    calls.push do (outFile, output) ->\n      (callback) ->\n        mkdirp path.dirname(outFile)\n        fs.writeFile outFile, output, ->\n          console.warn \"  > #{outFile}\"  unless options.quiet\n          callback null, outFile\n\n",
          "docsHtml": "<ul>\n<li>Queue up the mkdir/writeFile calls.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>    <span class=\"nx\">calls</span><span class=\"p\">.</span><span class=\"nx\">push</span> <span class=\"nx\">do</span> <span class=\"p\">(</span><span class=\"nx\">outFile</span><span class=\"p\">,</span> <span class=\"nx\">output</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n        <span class=\"nx\">mkdirp</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">dirname</span><span class=\"p\">(</span><span class=\"nx\">outFile</span><span class=\"p\">)</span>\n        <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFile</span> <span class=\"nx\">outFile</span><span class=\"p\">,</span> <span class=\"nx\">output</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;  &gt; #{outFile}&quot;</span>  <span class=\"nx\">unless</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">quiet</span>\n          <span class=\"nx\">callback</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">outFile</span></pre></div>",
          "anchor": "section-16",
          "headings": []
        },
        {
          "docsText": "- Invoke the queued up the write functions.\n",
          "codeText": "  async.parallel calls, callback\n\nmodule.exports = {build}\n\n",
          "docsHtml": "<ul>\n<li>Invoke the queued up the write functions.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">async</span><span class=\"p\">.</span><span class=\"nx\">parallel</span> <span class=\"nx\">calls</span><span class=\"p\">,</span> <span class=\"nx\">callback</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nx\">build</span><span class=\"p\">}</span>\n\n</pre></div>",
          "anchor": "section-17",
          "headings": []
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "Lidoc.Builder",
          "anchor": "Lidoc-Builder",
          "htmlFile": "lib/lidoc/builder.html"
        },
        {
          "level": 3,
          "title": "build()",
          "anchor": "build",
          "htmlFile": "lib/lidoc/builder.html"
        },
        {
          "level": 3,
          "title": "writeCSS()",
          "anchor": "writeCSS",
          "htmlFile": "lib/lidoc/builder.html"
        },
        {
          "level": 3,
          "title": "writeAssets()",
          "anchor": "writeAssets",
          "htmlFile": "lib/lidoc/builder.html"
        },
        {
          "level": 3,
          "title": "writeFiles()",
          "anchor": "writeFiles",
          "htmlFile": "lib/lidoc/builder.html"
        }
      ],
      "sourceFile": "lib/lidoc/builder.coffee",
      "baseSourceFile": "builder.coffee",
      "mainHeading": {
        "level": 1,
        "title": "Lidoc.Builder",
        "anchor": "Lidoc-Builder",
        "htmlFile": "lib/lidoc/builder.html"
      }
    },
    "lib/lidoc/command.coffee": {
      "htmlFile": "lib/lidoc/command.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "command.html",
      "sections": [
        {
          "docsText": "# Lidoc.Command\n",
          "codeText": "\n",
          "docsHtml": "<h1>Lidoc.Command</h1>",
          "codeHtml": "",
          "anchor": "Lidoc-Command",
          "headings": [
            {
              "level": 1,
              "title": "Lidoc.Command",
              "anchor": "Lidoc-Command",
              "htmlFile": "lib/lidoc/command.html"
            }
          ]
        },
        {
          "docsText": "Lidoc command line tool.\n",
          "codeText": "\nLidoc = require '../lidoc'\nfs = require 'fs'\n\n",
          "docsHtml": "<p>Lidoc command line tool.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">Lidoc</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;../lidoc&#39;</span>\n<span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;fs&#39;</span></pre></div>",
          "anchor": "section-1",
          "headings": []
        },
        {
          "docsText": "### getOptions()\n",
          "codeText": "\n",
          "docsHtml": "<h3>getOptions()</h3>",
          "codeHtml": "",
          "anchor": "getOptions",
          "headings": [
            {
              "level": 3,
              "title": "getOptions()",
              "anchor": "getOptions",
              "htmlFile": "lib/lidoc/command.html"
            }
          ]
        },
        {
          "docsText": "The command line parser.\n",
          "codeText": "\ngetOptions = ->\n",
          "docsHtml": "<p>The command line parser.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">getOptions</span> <span class=\"o\">=</span> <span class=\"o\">-&gt;</span></pre></div>",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "Bulid the command line parser using `commander`.\n",
          "codeText": "  options = require 'commander'\n  options\n    .version(\"Lidoc version #{Lidoc.version}\")\n    .usage(\"<sourcefile ...> [options]\")\n    .option('-o, --output <path>', 'Write documentation output into this path')\n    .option('-i, --index [file]', 'Write index into file (use stdout if no file)')\n    .option('-q, --quiet', 'Suppress messages')\n    .option('--import <file>', 'Use a given JSON file as an index instead of parsing')\n    .option('--css <file>', 'Specify custom CSS file')\n    .option('--github <user/repo>', 'Link files to this Github repository')\n    .option('--git-branch <branch>', 'Branch of Git to link to [master]', 'master')\n    .on('--help', ->\n      console.log \"At least --output and/or --index must be used.\"\n      console.log \"\"\n      console.log \"  Example:\"\n      console.log \"\"\n      console.log \"    $ #{options.name} lib/**/*.js --output docs\"\n      console.log \"    $ #{options.name} **/*.rb --index project.json\"\n      console.log \"\"\n    )\n  options\n\n",
          "docsHtml": "<p>Bulid the command line parser using <code>commander</code>.</p>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;commander&#39;</span>\n  <span class=\"nx\">options</span>\n    <span class=\"p\">.</span><span class=\"nx\">version</span><span class=\"p\">(</span><span class=\"s2\">&quot;Lidoc version #{Lidoc.version}&quot;</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">usage</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;sourcefile ...&gt; [options]&quot;</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">option</span><span class=\"p\">(</span><span class=\"s1\">&#39;-o, --output &lt;path&gt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Write documentation output into this path&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">option</span><span class=\"p\">(</span><span class=\"s1\">&#39;-i, --index [file]&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Write index into file (use stdout if no file)&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">option</span><span class=\"p\">(</span><span class=\"s1\">&#39;-q, --quiet&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Suppress messages&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">option</span><span class=\"p\">(</span><span class=\"s1\">&#39;--import &lt;file&gt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Use a given JSON file as an index instead of parsing&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">option</span><span class=\"p\">(</span><span class=\"s1\">&#39;--css &lt;file&gt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Specify custom CSS file&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">option</span><span class=\"p\">(</span><span class=\"s1\">&#39;--github &lt;user/repo&gt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Link files to this Github repository&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"nx\">option</span><span class=\"p\">(</span><span class=\"s1\">&#39;--git-branch &lt;branch&gt;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Branch of Git to link to [master]&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;master&#39;</span><span class=\"p\">)</span>\n    <span class=\"p\">.</span><span class=\"kc\">on</span><span class=\"p\">(</span><span class=\"s1\">&#39;--help&#39;</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"s2\">&quot;At least --output and/or --index must be used.&quot;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"s2\">&quot;&quot;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"s2\">&quot;  Example:&quot;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"s2\">&quot;&quot;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"s2\">&quot;    $ #{options.name} lib/**/*.js --output docs&quot;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"s2\">&quot;    $ #{options.name} **/*.rb --index project.json&quot;</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"p\">)</span>\n  <span class=\"nx\">options</span></pre></div>",
          "anchor": "section-4",
          "headings": []
        },
        {
          "docsText": "### work()\n",
          "codeText": "\n",
          "docsHtml": "<h3>work()</h3>",
          "codeHtml": "",
          "anchor": "work",
          "headings": [
            {
              "level": 3,
              "title": "work()",
              "anchor": "work",
              "htmlFile": "lib/lidoc/command.html"
            }
          ]
        },
        {
          "docsText": "Parses command line arguments and performs actions.\n",
          "codeText": "\nwork = (argv) ->\n  options = getOptions()\n\n",
          "docsHtml": "<p>Parses command line arguments and performs actions.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">work</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">argv</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"nx\">getOptions</span><span class=\"p\">()</span></pre></div>",
          "anchor": "section-6",
          "headings": []
        },
        {
          "docsText": "- Parse the commands.\n",
          "codeText": "  options.parse(argv)\n  options.files = options.args\n\n",
          "docsHtml": "<ul>\n<li>Parse the commands.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">argv</span><span class=\"p\">)</span>\n  <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">args</span></pre></div>",
          "anchor": "section-7",
          "headings": []
        },
        {
          "docsText": "- Do some sanity checks.\n",
          "codeText": "  if options.files.length is 0 and not options.import\n    console.warn \"No files to work on.\"\n    console.warn \"See `#{options.name} --help` for more information.\"\n    process.exit 1\n\n  if !options.index and !options.output\n    console.warn \"Nothing to do. Try using --output to write to a directory:\"\n    console.warn \"\"\n    console.warn \"    #{options.name} **/*.js --output docs\"\n    console.warn \"\"\n    console.warn \"See `#{options.name} --help` for more information.\"\n    process.exit 15\n\n  buildFromOutput = (output) ->\n    console.warn \"Writing:\"  unless options.quiet\n\n    if options.index\n      out = JSON.stringify(output, null, 2)\n\n      if options.index is true\n        console.log out\n      else\n        fs.writeFile options.index, out, ->\n          console.warn \"  > #{options.index}\"  unless options.quiet\n\n    if options.output\n      Lidoc.build output, options, (err, results) ->\n\n",
          "docsHtml": "<ul>\n<li>Do some sanity checks.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"k\">if</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">is</span> <span class=\"mi\">0</span> <span class=\"o\">and</span> <span class=\"o\">not</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">import</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;No files to work on.&quot;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;See `#{options.name} --help` for more information.&quot;</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span> <span class=\"mi\">1</span>\n\n  <span class=\"k\">if</span> <span class=\"o\">!</span><span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">index</span> <span class=\"o\">and</span> <span class=\"o\">!</span><span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">output</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;Nothing to do. Try using --output to write to a directory:&quot;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;    #{options.name} **/*.js --output docs&quot;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;See `#{options.name} --help` for more information.&quot;</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span> <span class=\"mi\">15</span>\n\n  <span class=\"nx\">buildFromOutput</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">output</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;Writing:&quot;</span>  <span class=\"nx\">unless</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">quiet</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">index</span>\n      <span class=\"nx\">out</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"nx\">output</span><span class=\"p\">,</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n      <span class=\"k\">if</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">index</span> <span class=\"o\">is</span> <span class=\"kc\">true</span>\n        <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"nx\">out</span>\n      <span class=\"k\">else</span>\n        <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">writeFile</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">index</span><span class=\"p\">,</span> <span class=\"nx\">out</span><span class=\"p\">,</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;  &gt; #{options.index}&quot;</span>  <span class=\"nx\">unless</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">quiet</span>\n\n    <span class=\"k\">if</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">output</span>\n      <span class=\"nx\">Lidoc</span><span class=\"p\">.</span><span class=\"nx\">build</span> <span class=\"nx\">output</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">results</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span></pre></div>",
          "anchor": "section-8",
          "headings": []
        },
        {
          "docsText": "- Do the actual parsing. Either import it from a JSON index, or parse it\nfrom the source tree\n",
          "codeText": "  if options.import?\n    fs.readFile options.import, (err, data) ->\n      buildFromOutput JSON.parse(data)\n  else\n    Lidoc.parse options, buildFromOutput\n\nCommand = module.exports = {work, getOptions}\n\n",
          "docsHtml": "<ul>\n<li>Do the actual parsing. Either import it from a JSON index, or parse it\nfrom the source tree</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"k\">if</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">import</span><span class=\"o\">?</span>\n    <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">import</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"nx\">buildFromOutput</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">data</span><span class=\"p\">)</span>\n  <span class=\"k\">else</span>\n    <span class=\"nx\">Lidoc</span><span class=\"p\">.</span><span class=\"nx\">parse</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">buildFromOutput</span>\n\n<span class=\"nx\">Command</span> <span class=\"o\">=</span> <span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nx\">work</span><span class=\"p\">,</span> <span class=\"nx\">getOptions</span><span class=\"p\">}</span>\n\n</pre></div>",
          "anchor": "section-9",
          "headings": []
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "Lidoc.Command",
          "anchor": "Lidoc-Command",
          "htmlFile": "lib/lidoc/command.html"
        },
        {
          "level": 3,
          "title": "getOptions()",
          "anchor": "getOptions",
          "htmlFile": "lib/lidoc/command.html"
        },
        {
          "level": 3,
          "title": "work()",
          "anchor": "work",
          "htmlFile": "lib/lidoc/command.html"
        }
      ],
      "sourceFile": "lib/lidoc/command.coffee",
      "baseSourceFile": "command.coffee",
      "mainHeading": {
        "level": 1,
        "title": "Lidoc.Command",
        "anchor": "Lidoc-Command",
        "htmlFile": "lib/lidoc/command.html"
      }
    },
    "lib/lidoc/filetree.coffee": {
      "htmlFile": "lib/lidoc/filetree.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "filetree.html",
      "sections": [
        {
          "docsText": "# Lidoc.Filetree\n",
          "codeText": "\n",
          "docsHtml": "<h1>Lidoc.Filetree</h1>",
          "codeHtml": "",
          "anchor": "Lidoc-Filetree",
          "headings": [
            {
              "level": 1,
              "title": "Lidoc.Filetree",
              "anchor": "Lidoc-Filetree",
              "htmlFile": "lib/lidoc/filetree.html"
            }
          ]
        },
        {
          "docsText": "Represents a hierarchal index of a bunch of files.\n\n    tree = new Lidoc.Filetree(files)\n\n    tree ==\n      name: '.'\n      paths:\n        'app':\n          name: 'app'\n          paths:\n            'file.js':\n              name: 'file.js'\n              file: {File}\n        'README.md':\n          name: 'file.js'\n          file: {File}\n\n    # File (assets/javascripts/parser.html)\n    tree.paths['assets'].paths['javascripts'].paths['parser.html']\n\nYou can get this from `Project.index.fileTree`, or `fileTree` in the HTML\ntemplate.\n",
          "codeText": "\npath = require 'path'\n\nclass Filetree\n  constructor: (options={}) ->\n    @name = options.name ? \"\"\n    @file = options.file ? null\n    @paths = {}\n\n",
          "docsHtml": "<p>Represents a hierarchal index of a bunch of files.</p>\n\n<pre><code>tree = new Lidoc.Filetree(files)\n\ntree ==\n  name: '.'\n  paths:\n    'app':\n      name: 'app'\n      paths:\n        'file.js':\n          name: 'file.js'\n          file: {File}\n    'README.md':\n      name: 'file.js'\n      file: {File}\n\n# File (assets/javascripts/parser.html)\ntree.paths['assets'].paths['javascripts'].paths['parser.html']\n</code></pre>\n\n<p>You can get this from <code>Project.index.fileTree</code>, or <code>fileTree</code> in the HTML\ntemplate.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;path&#39;</span>\n\n<span class=\"nx\">class</span> <span class=\"nx\">Filetree</span>\n  <span class=\"nv\">constructor: </span><span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"o\">=</span><span class=\"p\">{})</span> <span class=\"o\">-&gt;</span>\n    <span class=\"err\">@</span><span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">name</span> <span class=\"o\">?</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"err\">@</span><span class=\"nx\">file</span> <span class=\"o\">=</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">file</span> <span class=\"o\">?</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">paths</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></pre></div>",
          "anchor": "section-1",
          "headings": []
        },
        {
          "docsText": "### buildFrom()\n",
          "codeText": "\n",
          "docsHtml": "<h3>buildFrom()</h3>",
          "codeHtml": "",
          "anchor": "buildFrom",
          "headings": [
            {
              "level": 3,
              "title": "buildFrom()",
              "anchor": "buildFrom",
              "htmlFile": "lib/lidoc/filetree.html"
            }
          ]
        },
        {
          "docsText": "Takes `files` from a {Project} and builds a filetree from it.\n\n",
          "codeText": "  buildFrom: (files) ->\n    for i, file of files\n      name = file.htmlFile\n      segments = name.split(path.sep)\n\n      @addFile segments, file\n\n    @sort()\n\n    this\n\n",
          "docsHtml": "<p>Takes <code>files</code> from a {Project} and builds a filetree from it.</p>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nv\">buildFrom: </span><span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">for</span> <span class=\"nx\">i</span><span class=\"p\">,</span> <span class=\"nx\">file</span> <span class=\"k\">of</span> <span class=\"nx\">files</span>\n      <span class=\"nx\">name</span> <span class=\"o\">=</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">htmlFile</span>\n      <span class=\"nx\">segments</span> <span class=\"o\">=</span> <span class=\"nx\">name</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">sep</span><span class=\"p\">)</span>\n\n      <span class=\"err\">@</span><span class=\"nx\">addFile</span> <span class=\"nx\">segments</span><span class=\"p\">,</span> <span class=\"nx\">file</span>\n\n    <span class=\"err\">@</span><span class=\"nx\">sort</span><span class=\"p\">()</span>\n\n    <span class=\"k\">this</span></pre></div>",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "### sort()\n",
          "codeText": "\n",
          "docsHtml": "<h3>sort()</h3>",
          "codeHtml": "",
          "anchor": "sort",
          "headings": [
            {
              "level": 3,
              "title": "sort()",
              "anchor": "sort",
              "htmlFile": "lib/lidoc/filetree.html"
            }
          ]
        },
        {
          "docsText": "Ensures that the paths are sorted.\n",
          "codeText": "  sort: ->\n    newPaths = {}\n\n",
          "docsHtml": "<p>Ensures that the paths are sorted.</p>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nv\">sort: </span><span class=\"o\">-&gt;</span>\n    <span class=\"nx\">newPaths</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></pre></div>",
          "anchor": "section-5",
          "headings": []
        },
        {
          "docsText": "- Get all the names and sort them\n",
          "codeText": "    names = []\n    for name, object of @paths\n      names.push name\n\n    names = names.sort()\n\n",
          "docsHtml": "<ul>\n<li>Get all the names and sort them</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>    <span class=\"nx\">names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">object</span> <span class=\"k\">of</span> <span class=\"err\">@</span><span class=\"nx\">paths</span>\n      <span class=\"nx\">names</span><span class=\"p\">.</span><span class=\"nx\">push</span> <span class=\"nx\">name</span>\n\n    <span class=\"nx\">names</span> <span class=\"o\">=</span> <span class=\"nx\">names</span><span class=\"p\">.</span><span class=\"nx\">sort</span><span class=\"p\">()</span></pre></div>",
          "anchor": "section-6",
          "headings": []
        },
        {
          "docsText": "- Now put them back in, recursing in the process\n",
          "codeText": "    names.forEach (name) =>\n      @paths[name].sort()  if typeof @paths[name].sort is 'function'\n      newPaths[name] = @paths[name]\n\n",
          "docsHtml": "<ul>\n<li>Now put them back in, recursing in the process</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>    <span class=\"nx\">names</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n      <span class=\"err\">@</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">].</span><span class=\"nx\">sort</span><span class=\"p\">()</span>  <span class=\"k\">if</span> <span class=\"k\">typeof</span> <span class=\"err\">@</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">].</span><span class=\"nx\">sort</span> <span class=\"o\">is</span> <span class=\"s1\">&#39;function&#39;</span>\n      <span class=\"nx\">newPaths</span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"nx\">name</span><span class=\"p\">]</span></pre></div>",
          "anchor": "section-7",
          "headings": []
        },
        {
          "docsText": "- And replace the old paths with the new\n",
          "codeText": "    delete(@paths)\n    @paths = newPaths\n\n    this\n\n  addFile: (segments, file) ->\n    if segments.length is 1\n      @paths[segments[0]] = new Filetree(name: segments[0], file: file.htmlFile)\n\n    else\n      @paths[segments[0]] ?= new Filetree(name: segments[0])\n      @paths[segments[0]].addFile segments.slice(1), file\n\n    this\n\nmodule.exports = Filetree\n\n",
          "docsHtml": "<ul>\n<li>And replace the old paths with the new</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>    <span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"nx\">paths</span><span class=\"p\">)</span>\n    <span class=\"err\">@</span><span class=\"nx\">paths</span> <span class=\"o\">=</span> <span class=\"nx\">newPaths</span>\n\n    <span class=\"k\">this</span>\n\n  <span class=\"nv\">addFile: </span><span class=\"p\">(</span><span class=\"nx\">segments</span><span class=\"p\">,</span> <span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">if</span> <span class=\"nx\">segments</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">is</span> <span class=\"mi\">1</span>\n      <span class=\"err\">@</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"nx\">segments</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Filetree</span><span class=\"p\">(</span><span class=\"nv\">name: </span><span class=\"nx\">segments</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nv\">file: </span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">htmlFile</span><span class=\"p\">)</span>\n\n    <span class=\"k\">else</span>\n      <span class=\"err\">@</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"nx\">segments</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span> <span class=\"o\">?=</span> <span class=\"k\">new</span> <span class=\"nx\">Filetree</span><span class=\"p\">(</span><span class=\"nv\">name: </span><span class=\"nx\">segments</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n      <span class=\"err\">@</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"nx\">segments</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]].</span><span class=\"nx\">addFile</span> <span class=\"nx\">segments</span><span class=\"p\">.</span><span class=\"nx\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"nx\">file</span>\n\n    <span class=\"k\">this</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"nx\">Filetree</span>\n\n</pre></div>",
          "anchor": "section-8",
          "headings": []
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "Lidoc.Filetree",
          "anchor": "Lidoc-Filetree",
          "htmlFile": "lib/lidoc/filetree.html"
        },
        {
          "level": 3,
          "title": "buildFrom()",
          "anchor": "buildFrom",
          "htmlFile": "lib/lidoc/filetree.html"
        },
        {
          "level": 3,
          "title": "sort()",
          "anchor": "sort",
          "htmlFile": "lib/lidoc/filetree.html"
        }
      ],
      "sourceFile": "lib/lidoc/filetree.coffee",
      "baseSourceFile": "filetree.coffee",
      "mainHeading": {
        "level": 1,
        "title": "Lidoc.Filetree",
        "anchor": "Lidoc-Filetree",
        "htmlFile": "lib/lidoc/filetree.html"
      }
    },
    "lib/lidoc/helpers.coffee": {
      "htmlFile": "lib/lidoc/helpers.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "helpers.html",
      "sections": [
        {
          "docsText": "# Lidoc.Helpers\n",
          "codeText": "\n",
          "docsHtml": "<h1>Lidoc.Helpers</h1>",
          "codeHtml": "",
          "anchor": "Lidoc-Helpers",
          "headings": [
            {
              "level": 1,
              "title": "Lidoc.Helpers",
              "anchor": "Lidoc-Helpers",
              "htmlFile": "lib/lidoc/helpers.html"
            }
          ]
        },
        {
          "docsText": "Hello.\n",
          "codeText": "\nfs = require 'fs'\npath = require 'path'\n\n",
          "docsHtml": "<p>Hello.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;fs&#39;</span>\n<span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;path&#39;</span></pre></div>",
          "anchor": "section-1",
          "headings": []
        },
        {
          "docsText": "### getResource()\n",
          "codeText": "\n",
          "docsHtml": "<h3>getResource()</h3>",
          "codeHtml": "",
          "anchor": "getResource",
          "headings": [
            {
              "level": 3,
              "title": "getResource()",
              "anchor": "getResource",
              "htmlFile": "lib/lidoc/helpers.html"
            }
          ]
        },
        {
          "docsText": "Read resource file `name` and return its content.\n\n    getResource('languages.json')\n\n",
          "codeText": "getResource = (name) ->\n  fullPath = path.join __dirname, '..', '..', 'resources', name\n  fs.readFileSync(fullPath).toString()\n\n",
          "docsHtml": "<p>Read resource file <code>name</code> and return its content.</p>\n\n<pre><code>getResource('languages.json')\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">getResource</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">fullPath</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span> <span class=\"nx\">__dirname</span><span class=\"p\">,</span> <span class=\"s1\">&#39;..&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;..&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;resources&#39;</span><span class=\"p\">,</span> <span class=\"nx\">name</span>\n  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"nx\">fullPath</span><span class=\"p\">).</span><span class=\"nx\">toString</span><span class=\"p\">()</span></pre></div>",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "### template()\n",
          "codeText": "\n",
          "docsHtml": "<h3>template()</h3>",
          "codeHtml": "",
          "anchor": "template",
          "headings": [
            {
              "level": 3,
              "title": "template()",
              "anchor": "template",
              "htmlFile": "lib/lidoc/helpers.html"
            }
          ]
        },
        {
          "docsText": "Micro-templating, originally by John Resig, borrowed by way of\n[Underscore.js](http://documentcloud.github.com/underscore/).\n\n",
          "codeText": "template = (str) ->\n  new Function 'obj',\n    'var p=[],print=function(){p.push.apply(p,arguments);};' +\n    'with(obj){p.push(\\'' +\n    str.replace(/[\\r\\t\\n]/g, \" \")\n       .replace(/'(?=[^<]*%>)/g,\"\\t\")\n       .split(\"'\").join(\"\\\\'\")\n       .split(\"\\t\").join(\"'\")\n       .replace(/<%=(.+?)%>/g, \"',$1,'\")\n       .split('<%').join(\"');\")\n       .split('%>').join(\"p.push('\") +\n       \"');}return p.join('');\"\n\n",
          "docsHtml": "<p>Micro-templating, originally by John Resig, borrowed by way of\n<a href=\"http://documentcloud.github.com/underscore/\">Underscore.js</a>.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">template</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"k\">new</span> <span class=\"nb\">Function</span> <span class=\"s1\">&#39;obj&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;var p=[],print=function(){p.push.apply(p,arguments);};&#39;</span> <span class=\"o\">+</span>\n    <span class=\"s1\">&#39;with(obj){p.push(\\&#39;&#39;</span> <span class=\"o\">+</span>\n    <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/[\\r\\t\\n]/g</span><span class=\"p\">,</span> <span class=\"s2\">&quot; &quot;</span><span class=\"p\">)</span>\n       <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/&#39;(?=[^&lt;]*%&gt;)/g</span><span class=\"p\">,</span><span class=\"s2\">&quot;\\t&quot;</span><span class=\"p\">)</span>\n       <span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;\\\\&#39;&quot;</span><span class=\"p\">)</span>\n       <span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;\\t&quot;</span><span class=\"p\">).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">)</span>\n       <span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/&lt;%=(.+?)%&gt;/g</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&#39;,$1,&#39;&quot;</span><span class=\"p\">)</span>\n       <span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;&lt;%&#39;</span><span class=\"p\">).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;);&quot;</span><span class=\"p\">)</span>\n       <span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;%&gt;&#39;</span><span class=\"p\">).</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;p.push(&#39;&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span>\n       <span class=\"s2\">&quot;&#39;);}return p.join(&#39;&#39;);&quot;</span></pre></div>",
          "anchor": "section-5",
          "headings": []
        },
        {
          "docsText": "### slugify()\n",
          "codeText": "\n",
          "docsHtml": "<h3>slugify()</h3>",
          "codeHtml": "",
          "anchor": "slugify",
          "headings": [
            {
              "level": 3,
              "title": "slugify()",
              "anchor": "slugify",
              "htmlFile": "lib/lidoc/helpers.html"
            }
          ]
        },
        {
          "docsText": "Takes a given string `str` and normalizes it to be an alpha-numeric string.\n\n    slugify(\"50% off\")  #=> \"50-off\"\n\n",
          "codeText": "slugify = (str, space='-') ->\n  str.replace(/[^A-Za-z0-9]+/g, ' ').trim().replace(/\\ +/g, space)\n\n",
          "docsHtml": "<p>Takes a given string <code>str</code> and normalizes it to be an alpha-numeric string.</p>\n\n<pre><code>slugify(\"50% off\")  #=&gt; \"50-off\"\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">slugify</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">,</span> <span class=\"nx\">space</span><span class=\"o\">=</span><span class=\"s1\">&#39;-&#39;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">str</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/[^A-Za-z0-9]+/g</span><span class=\"p\">,</span> <span class=\"s1\">&#39; &#39;</span><span class=\"p\">).</span><span class=\"nx\">trim</span><span class=\"p\">().</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/\\ +/g</span><span class=\"p\">,</span> <span class=\"nx\">space</span><span class=\"p\">)</span></pre></div>",
          "anchor": "section-7",
          "headings": []
        },
        {
          "docsText": "### changeExtension()\n",
          "codeText": "\n",
          "docsHtml": "<h3>changeExtension()</h3>",
          "codeHtml": "",
          "anchor": "changeExtension",
          "headings": [
            {
              "level": 3,
              "title": "changeExtension()",
              "anchor": "changeExtension",
              "htmlFile": "lib/lidoc/helpers.html"
            }
          ]
        },
        {
          "docsText": "Replaces the extension of `filename` to `ext`.\n\n    changeExtension(\"parser.js\", \".html\")\n    #=> \"parser.html\"\n\n",
          "codeText": "changeExtension = (filename, ext) ->\n  filename.replace(/(\\.[^\\.]+)?$/, ext)\n\n",
          "docsHtml": "<p>Replaces the extension of <code>filename</code> to <code>ext</code>.</p>\n\n<pre><code>changeExtension(\"parser.js\", \".html\")\n#=&gt; \"parser.html\"\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">changeExtension</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">filename</span><span class=\"p\">,</span> <span class=\"nx\">ext</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">filename</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"sr\">/(\\.[^\\.]+)?$/</span><span class=\"p\">,</span> <span class=\"nx\">ext</span><span class=\"p\">)</span></pre></div>",
          "anchor": "section-9",
          "headings": []
        },
        {
          "docsText": "### getFileDepth()\n",
          "codeText": "\ngetFileDepth = (filepath) ->\n  path = require 'path'\n  m = filepath.match(new RegExp(path.sep, 'g'))\n  if m? then m.length else 0\n\n",
          "docsHtml": "<h3>getFileDepth()</h3>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">getFileDepth</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">filepath</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;path&#39;</span>\n  <span class=\"nx\">m</span> <span class=\"o\">=</span> <span class=\"nx\">filepath</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">sep</span><span class=\"p\">,</span> <span class=\"s1\">&#39;g&#39;</span><span class=\"p\">))</span>\n  <span class=\"k\">if</span> <span class=\"nx\">m</span><span class=\"o\">?</span> <span class=\"k\">then</span> <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"k\">else</span> <span class=\"mi\">0</span></pre></div>",
          "anchor": "getFileDepth",
          "headings": [
            {
              "level": 3,
              "title": "getFileDepth()",
              "anchor": "getFileDepth",
              "htmlFile": "lib/lidoc/helpers.html"
            }
          ]
        },
        {
          "docsText": "### strRepeat()\n",
          "codeText": "\n",
          "docsHtml": "<h3>strRepeat()</h3>",
          "codeHtml": "",
          "anchor": "strRepeat",
          "headings": [
            {
              "level": 3,
              "title": "strRepeat()",
              "anchor": "strRepeat",
              "htmlFile": "lib/lidoc/helpers.html"
            }
          ]
        },
        {
          "docsText": "Repeats a given string `str` up to `count` times.\n",
          "codeText": "\nstrRepeat = (str, count=1) ->\n  return \"\"  if count <= 0\n  output = \"\"\n  for i in [1..count]\n    output += str\n  output\n\nmodule.exports =\n  {getResource, template, slugify, changeExtension, strRepeat,\n  getFileDepth}\n\n",
          "docsHtml": "<p>Repeats a given string <code>str</code> up to <code>count</code> times.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">strRepeat</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">str</span><span class=\"p\">,</span> <span class=\"nx\">count</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>  <span class=\"k\">if</span> <span class=\"nx\">count</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span>\n  <span class=\"nx\">output</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n  <span class=\"k\">for</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">..</span><span class=\"nx\">count</span><span class=\"p\">]</span>\n    <span class=\"nx\">output</span> <span class=\"o\">+=</span> <span class=\"nx\">str</span>\n  <span class=\"nx\">output</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span>\n  <span class=\"p\">{</span><span class=\"nx\">getResource</span><span class=\"p\">,</span> <span class=\"nx\">template</span><span class=\"p\">,</span> <span class=\"nx\">slugify</span><span class=\"p\">,</span> <span class=\"nx\">changeExtension</span><span class=\"p\">,</span> <span class=\"nx\">strRepeat</span><span class=\"p\">,</span>\n  <span class=\"nx\">getFileDepth</span><span class=\"p\">}</span>\n\n</pre></div>",
          "anchor": "section-12",
          "headings": []
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "Lidoc.Helpers",
          "anchor": "Lidoc-Helpers",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "getResource()",
          "anchor": "getResource",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "template()",
          "anchor": "template",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "slugify()",
          "anchor": "slugify",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "changeExtension()",
          "anchor": "changeExtension",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "getFileDepth()",
          "anchor": "getFileDepth",
          "htmlFile": "lib/lidoc/helpers.html"
        },
        {
          "level": 3,
          "title": "strRepeat()",
          "anchor": "strRepeat",
          "htmlFile": "lib/lidoc/helpers.html"
        }
      ],
      "sourceFile": "lib/lidoc/helpers.coffee",
      "baseSourceFile": "helpers.coffee",
      "mainHeading": {
        "level": 1,
        "title": "Lidoc.Helpers",
        "anchor": "Lidoc-Helpers",
        "htmlFile": "lib/lidoc/helpers.html"
      }
    },
    "lib/lidoc/languages.coffee": {
      "htmlFile": "lib/lidoc/languages.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "languages.html",
      "sections": [
        {
          "docsText": "# Lidoc.Languages\n",
          "codeText": "\n{getResource} = require './helpers'\npath = require 'path'\n\n",
          "docsHtml": "<h1>Lidoc.Languages</h1>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"p\">{</span><span class=\"nx\">getResource</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;./helpers&#39;</span>\n<span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;path&#39;</span></pre></div>",
          "anchor": "Lidoc-Languages",
          "headings": [
            {
              "level": 1,
              "title": "Lidoc.Languages",
              "anchor": "Lidoc-Languages",
              "htmlFile": "lib/lidoc/languages.html"
            }
          ]
        },
        {
          "docsText": "### languages\n",
          "codeText": "\n",
          "docsHtml": "<h3>languages</h3>",
          "codeHtml": "",
          "anchor": "languages",
          "headings": [
            {
              "level": 3,
              "title": "languages",
              "anchor": "languages",
              "htmlFile": "lib/lidoc/languages.html"
            }
          ]
        },
        {
          "docsText": "A dict object of languages.\n",
          "codeText": "languages = JSON.parse getResource 'languages.json'\n\n",
          "docsHtml": "<p>A dict object of languages.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">languages</span> <span class=\"o\">=</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span> <span class=\"nx\">getResource</span> <span class=\"s1\">&#39;languages.json&#39;</span></pre></div>",
          "anchor": "section-2",
          "headings": []
        },
        {
          "docsText": "Build out the appropriate matchers and delimiters for each language.\n",
          "codeText": "for ext, l of languages\n\n",
          "docsHtml": "<p>Build out the appropriate matchers and delimiters for each language.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"k\">for</span> <span class=\"nx\">ext</span><span class=\"p\">,</span> <span class=\"nx\">l</span> <span class=\"k\">of</span> <span class=\"nx\">languages</span></pre></div>",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "- Ignore [hashbangs](http://en.wikipedia.org/wiki/Shebang_(Unix\\))\n and interpolations...\n",
          "codeText": "  l.commentFilter = /(^#![/]|^\\s*#\\{)/\n\n",
          "docsHtml": "<ul>\n<li>Ignore <a href=\"http://en.wikipedia.org/wiki/Shebang_(Unix)\">hashbangs</a>\nand interpolations...</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">l</span><span class=\"p\">.</span><span class=\"nx\">commentFilter</span> <span class=\"o\">=</span> <span class=\"sr\">/(^#![/]|^\\s*#\\{)/</span></pre></div>",
          "anchor": "section-4",
          "headings": []
        },
        {
          "docsText": "- Does the line begin with a comment?\n",
          "codeText": "  if l.symbol is \"\"\n    l.commentMatcher = ///^///\n    l.commentFilter = /^$/\n  else\n    l.commentMatcher = ///^\\s*#{l.symbol}\\s?///\n\n",
          "docsHtml": "<ul>\n<li>Does the line begin with a comment?</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"k\">if</span> <span class=\"nx\">l</span><span class=\"p\">.</span><span class=\"nx\">symbol</span> <span class=\"o\">is</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"nx\">l</span><span class=\"p\">.</span><span class=\"nx\">commentMatcher</span> <span class=\"o\">=</span> <span class=\"err\">///^///</span>\n    <span class=\"nx\">l</span><span class=\"p\">.</span><span class=\"nx\">commentFilter</span> <span class=\"o\">=</span> <span class=\"sr\">/^$/</span>\n  <span class=\"k\">else</span>\n    <span class=\"nx\">l</span><span class=\"p\">.</span><span class=\"nx\">commentMatcher</span> <span class=\"o\">=</span> <span class=\"err\">///^\\s*#{l.symbol}\\s?///</span></pre></div>",
          "anchor": "section-5",
          "headings": []
        },
        {
          "docsText": "- The dividing token we feed into Pygments, to delimit the boundaries between\n sections.\n",
          "codeText": "  l.dividerText = \"\\n#{l.symbol}DIVIDER\\n\"\n\n",
          "docsHtml": "<ul>\n<li>The dividing token we feed into Pygments, to delimit the boundaries between\nsections.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">l</span><span class=\"p\">.</span><span class=\"nx\">dividerText</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;\\n#{l.symbol}DIVIDER\\n&quot;</span></pre></div>",
          "anchor": "section-6",
          "headings": []
        },
        {
          "docsText": "- The mirror of `dividerText` that we expect Pygments to return. We can split\n on this to recover the original sections.\n Note: the class is \"c\" for Python and \"c1\" for the other languages\n",
          "codeText": "  l.dividerHtml = ///\\n*<span\\sclass=\"c1?\">#{l.symbol}DIVIDER<\\/span>\\n*///\n\n",
          "docsHtml": "<ul>\n<li>The mirror of <code>dividerText</code> that we expect Pygments to return. We can split\non this to recover the original sections.\nNote: the class is \"c\" for Python and \"c1\" for the other languages</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">l</span><span class=\"p\">.</span><span class=\"nx\">dividerHtml</span> <span class=\"o\">=</span> <span class=\"err\">///\\n*&lt;span\\sclass=&quot;c1?&quot;&gt;#{l.symbol}DIVIDER&lt;\\/span&gt;\\n*///</span></pre></div>",
          "anchor": "section-7",
          "headings": []
        },
        {
          "docsText": "### getLanguage()\n",
          "codeText": "\n",
          "docsHtml": "<h3>getLanguage()</h3>",
          "codeHtml": "",
          "anchor": "getLanguage",
          "headings": [
            {
              "level": 3,
              "title": "getLanguage()",
              "anchor": "getLanguage",
              "htmlFile": "lib/lidoc/languages.html"
            }
          ]
        },
        {
          "docsText": "Get the current language we're documenting, based on the extension of the\nfilename `source`.\n\n    getLanguage(\".py\")\n    #=> {name: \"Python\", commentMatcher: \"..\", commentFilter: \"...\", }\n\n",
          "codeText": "getLanguage = (source) -> languages[path.extname(source)]\n\n",
          "docsHtml": "<p>Get the current language we're documenting, based on the extension of the\nfilename <code>source</code>.</p>\n\n<pre><code>getLanguage(\".py\")\n#=&gt; {name: \"Python\", commentMatcher: \"..\", commentFilter: \"...\", }\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">getLanguage</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nx\">languages</span><span class=\"p\">[</span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">extname</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">)]</span></pre></div>",
          "anchor": "section-9",
          "headings": []
        },
        {
          "docsText": "...\n",
          "codeText": "module.exports = {languages, getLanguage}\n\n",
          "docsHtml": "<p>...</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nx\">languages</span><span class=\"p\">,</span> <span class=\"nx\">getLanguage</span><span class=\"p\">}</span>\n\n</pre></div>",
          "anchor": "section-10",
          "headings": []
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "Lidoc.Languages",
          "anchor": "Lidoc-Languages",
          "htmlFile": "lib/lidoc/languages.html"
        },
        {
          "level": 3,
          "title": "languages",
          "anchor": "languages",
          "htmlFile": "lib/lidoc/languages.html"
        },
        {
          "level": 3,
          "title": "getLanguage()",
          "anchor": "getLanguage",
          "htmlFile": "lib/lidoc/languages.html"
        }
      ],
      "sourceFile": "lib/lidoc/languages.coffee",
      "baseSourceFile": "languages.coffee",
      "mainHeading": {
        "level": 1,
        "title": "Lidoc.Languages",
        "anchor": "Lidoc-Languages",
        "htmlFile": "lib/lidoc/languages.html"
      }
    },
    "lib/lidoc/parser.coffee": {
      "htmlFile": "lib/lidoc/parser.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "parser.html",
      "sections": [
        {
          "docsText": "# Lidoc.Parser\n",
          "codeText": "\n",
          "docsHtml": "<h1>Lidoc.Parser</h1>",
          "codeHtml": "",
          "anchor": "Lidoc-Parser",
          "headings": [
            {
              "level": 1,
              "title": "Lidoc.Parser",
              "anchor": "Lidoc-Parser",
              "htmlFile": "lib/lidoc/parser.html"
            }
          ]
        },
        {
          "docsText": "Handles parsing of documents and outputs them into a general-purpose JSON.\n",
          "codeText": "\nfs = require 'fs'\npath = require 'path'\n{getLanguage} = require './languages'\n{slugify, changeExtension} = require './helpers'\n{Section, File, Project, Page, Heading} = require './structs'\n\n",
          "docsHtml": "<p>Handles parsing of documents and outputs them into a general-purpose JSON.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;fs&#39;</span>\n<span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;path&#39;</span>\n<span class=\"p\">{</span><span class=\"nx\">getLanguage</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;./languages&#39;</span>\n<span class=\"p\">{</span><span class=\"nx\">slugify</span><span class=\"p\">,</span> <span class=\"nx\">changeExtension</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;./helpers&#39;</span>\n<span class=\"p\">{</span><span class=\"nx\">Section</span><span class=\"p\">,</span> <span class=\"nx\">File</span><span class=\"p\">,</span> <span class=\"nx\">Project</span><span class=\"p\">,</span> <span class=\"nx\">Page</span><span class=\"p\">,</span> <span class=\"nx\">Heading</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;./structs&#39;</span></pre></div>",
          "anchor": "section-1",
          "headings": []
        },
        {
          "docsText": "### parse()\n",
          "codeText": "\n",
          "docsHtml": "<h3>parse()</h3>",
          "codeHtml": "",
          "anchor": "parse",
          "headings": [
            {
              "level": 3,
              "title": "parse()",
              "anchor": "parse",
              "htmlFile": "lib/lidoc/parser.html"
            }
          ]
        },
        {
          "docsText": "Parses a project.\n\nReturns a big JSON structured output (see `Project` under {Structs}).\n\nIt takes an options hash with the option `files`.\n\n    parse files: ['a.js','b.js', 'c.js'], (project) ->\n\n",
          "codeText": "parse = (options, callback) ->\n  files = options.files\n  project = new Project\n  i = 0\n\n",
          "docsHtml": "<p>Parses a project.</p>\n\n<p>Returns a big JSON structured output (see <code>Project</code> under {Structs}).</p>\n\n<p>It takes an options hash with the option <code>files</code>.</p>\n\n<pre><code>parse files: ['a.js','b.js', 'c.js'], (project) -&gt;\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">parse</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">files</span>\n  <span class=\"nx\">project</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Project</span>\n  <span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></pre></div>",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "Parse each of the given files using `File.create()`.\n",
          "codeText": "  console.warn \"Parsing:\"  unless options.quiet\n  files.forEach (fname, ii) ->\n\n",
          "docsHtml": "<p>Parse each of the given files using <code>File.create()</code>.</p>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;Parsing:&quot;</span>  <span class=\"nx\">unless</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">quiet</span>\n  <span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">fname</span><span class=\"p\">,</span> <span class=\"nx\">ii</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span></pre></div>",
          "anchor": "section-4",
          "headings": []
        },
        {
          "docsText": "- Reserve the slot so to preserve proper order.\n",
          "codeText": "    project.files[fname] = null\n\n",
          "docsHtml": "<ul>\n<li>Reserve the slot so to preserve proper order.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>    <span class=\"nx\">project</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">[</span><span class=\"nx\">fname</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">null</span></pre></div>",
          "anchor": "section-5",
          "headings": []
        },
        {
          "docsText": "- The first file will be the index file.\n",
          "codeText": "    isIndex = ii is 0\n\n",
          "docsHtml": "<ul>\n<li>The first file will be the index file.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>    <span class=\"nx\">isIndex</span> <span class=\"o\">=</span> <span class=\"nx\">ii</span> <span class=\"o\">is</span> <span class=\"mi\">0</span></pre></div>",
          "anchor": "section-6",
          "headings": []
        },
        {
          "docsText": "- Parse and highlight the file...\n",
          "codeText": "    File.create fname, isIndex, (file) ->\n      i += 1\n      project.files[file.sourceFile] = file\n      console.warn \"  < (#{i}/#{files.length}) #{file.sourceFile}\"  unless options.quiet\n\n",
          "docsHtml": "<ul>\n<li>Parse and highlight the file...</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>    <span class=\"nx\">File</span><span class=\"p\">.</span><span class=\"nx\">create</span> <span class=\"nx\">fname</span><span class=\"p\">,</span> <span class=\"nx\">isIndex</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"nx\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n      <span class=\"nx\">project</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">[</span><span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">sourceFile</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">file</span>\n      <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">warn</span> <span class=\"s2\">&quot;  &lt; (#{i}/#{files.length}) #{file.sourceFile}&quot;</span>  <span class=\"nx\">unless</span> <span class=\"nx\">options</span><span class=\"p\">.</span><span class=\"nx\">quiet</span></pre></div>",
          "anchor": "section-7",
          "headings": []
        },
        {
          "docsText": "- and when it's done...\n",
          "codeText": "      if i is files.length\n",
          "docsHtml": "<ul>\n<li>and when it's done...</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>      <span class=\"k\">if</span> <span class=\"nx\">i</span> <span class=\"o\">is</span> <span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">length</span></pre></div>",
          "anchor": "section-8",
          "headings": []
        },
        {
          "docsText": "- Generate a `pages` index...\n",
          "codeText": "        project.buildIndices()\n\n",
          "docsHtml": "<ul>\n<li>Generate a <code>pages</code> index...</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>        <span class=\"nx\">project</span><span class=\"p\">.</span><span class=\"nx\">buildIndices</span><span class=\"p\">()</span></pre></div>",
          "anchor": "section-9",
          "headings": []
        },
        {
          "docsText": "- Generate more stuff\n- and invoke the `callback` function with the final project.\n",
          "codeText": "        callback project\n\n",
          "docsHtml": "<ul>\n<li>Generate more stuff</li>\n<li>and invoke the <code>callback</code> function with the final project.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>        <span class=\"nx\">callback</span> <span class=\"nx\">project</span></pre></div>",
          "anchor": "section-10",
          "headings": []
        },
        {
          "docsText": "## Private API\n",
          "codeText": "\n",
          "docsHtml": "<h2>Private API</h2>",
          "codeHtml": "",
          "anchor": "Private-API",
          "headings": [
            {
              "level": 2,
              "title": "Private API",
              "anchor": "Private-API",
              "htmlFile": "lib/lidoc/parser.html"
            }
          ]
        },
        {
          "docsText": "### Project::buildIndices()\n",
          "codeText": "\n",
          "docsHtml": "<h3>Project::buildIndices()</h3>",
          "codeHtml": "",
          "anchor": "Project-buildIndices",
          "headings": [
            {
              "level": 3,
              "title": "Project::buildIndices()",
              "anchor": "Project-buildIndices",
              "htmlFile": "lib/lidoc/parser.html"
            }
          ]
        },
        {
          "docsText": "Builds the `index` stuff for file trees and such.\n",
          "codeText": "Project::buildIndices = ->\n  @pages = Page.createAll(@files)\n\n  @fileTree = do =>\n    Filetree = require './filetree'\n    (new Filetree).buildFrom @files\n\n  this\n\n",
          "docsHtml": "<p>Builds the <code>index</code> stuff for file trees and such.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">Project</span><span class=\"o\">::</span><span class=\"nx\">buildIndices</span> <span class=\"o\">=</span> <span class=\"o\">-&gt;</span>\n  <span class=\"err\">@</span><span class=\"nx\">pages</span> <span class=\"o\">=</span> <span class=\"nx\">Page</span><span class=\"p\">.</span><span class=\"nx\">createAll</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"nx\">files</span><span class=\"p\">)</span>\n\n  <span class=\"err\">@</span><span class=\"nx\">fileTree</span> <span class=\"o\">=</span> <span class=\"nx\">do</span> <span class=\"o\">=&gt;</span>\n    <span class=\"nx\">Filetree</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;./filetree&#39;</span>\n    <span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">Filetree</span><span class=\"p\">).</span><span class=\"nx\">buildFrom</span> <span class=\"err\">@</span><span class=\"nx\">files</span>\n\n  <span class=\"k\">this</span></pre></div>",
          "anchor": "section-13",
          "headings": []
        },
        {
          "docsText": "Okay, these are mostly private stuff.\n",
          "codeText": "\n",
          "docsHtml": "<p>Okay, these are mostly private stuff.</p>",
          "codeHtml": "",
          "anchor": "section-14",
          "headings": []
        },
        {
          "docsText": "### File.create()\n",
          "codeText": "\n",
          "docsHtml": "<h3>File.create()</h3>",
          "codeHtml": "",
          "anchor": "File-create",
          "headings": [
            {
              "level": 3,
              "title": "File.create()",
              "anchor": "File-create",
              "htmlFile": "lib/lidoc/parser.html"
            }
          ]
        },
        {
          "docsText": "Parses a given filename `source`.\nWhen it's done, invokes `callback` with a new `File` instance.\n\n",
          "codeText": "File.create = (source, isIndex=false, callback) ->\n  code = fs.readFileSync(source).toString()\n  htmlFile = (if isIndex then 'index.html' else changeExtension(source, '.html'))\n\n",
          "docsHtml": "<p>Parses a given filename <code>source</code>.\nWhen it's done, invokes <code>callback</code> with a new <code>File</code> instance.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">File</span><span class=\"p\">.</span><span class=\"nx\">create</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">,</span> <span class=\"nx\">isIndex</span><span class=\"o\">=</span><span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">code</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">).</span><span class=\"nx\">toString</span><span class=\"p\">()</span>\n  <span class=\"nx\">htmlFile</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"k\">if</span> <span class=\"nx\">isIndex</span> <span class=\"k\">then</span> <span class=\"s1\">&#39;index.html&#39;</span> <span class=\"k\">else</span> <span class=\"nx\">changeExtension</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">,</span> <span class=\"s1\">&#39;.html&#39;</span><span class=\"p\">))</span></pre></div>",
          "anchor": "section-16",
          "headings": []
        },
        {
          "docsText": "Parse the code into blocks to be sectionized using `parseCode`.\n",
          "codeText": "  file = new File\n    htmlFile: htmlFile\n    sections: parseCode(source, code)\n    sourceFile: source\n    baseHtmlFile: path.basename(htmlFile)\n    baseSourceFile: path.basename(source)\n    extension: path.extname(source).substr(1)\n    headings: []\n\n  file.highlight ->\n",
          "docsHtml": "<p>Parse the code into blocks to be sectionized using <code>parseCode</code>.</p>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">file</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">File</span>\n    <span class=\"nv\">htmlFile: </span><span class=\"nx\">htmlFile</span>\n    <span class=\"nv\">sections: </span><span class=\"nx\">parseCode</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">,</span> <span class=\"nx\">code</span><span class=\"p\">)</span>\n    <span class=\"nv\">sourceFile: </span><span class=\"nx\">source</span>\n    <span class=\"nv\">baseHtmlFile: </span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">basename</span><span class=\"p\">(</span><span class=\"nx\">htmlFile</span><span class=\"p\">)</span>\n    <span class=\"nv\">baseSourceFile: </span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">basename</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">)</span>\n    <span class=\"nv\">extension: </span><span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">extname</span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">).</span><span class=\"nx\">substr</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"nv\">headings: </span><span class=\"p\">[]</span>\n\n  <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">highlight</span> <span class=\"o\">-&gt;</span></pre></div>",
          "anchor": "section-17",
          "headings": []
        },
        {
          "docsText": "- Inject headings into each section.\n",
          "codeText": "    file.addHeadings()\n\n",
          "docsHtml": "<ul>\n<li>Inject headings into each section.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>    <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">addHeadings</span><span class=\"p\">()</span></pre></div>",
          "anchor": "section-18",
          "headings": []
        },
        {
          "docsText": "- Collect sub headings into `headings`.\n Also keep the first `<h1>` and place it onto `mainHeading`.\n",
          "codeText": "    file.sections.forEach (section) ->\n      section.headings.forEach (heading) ->\n        file.mainHeading = heading  if heading.level is 1\n        file.headings.push heading\n\n",
          "docsHtml": "<ul>\n<li>Collect sub headings into <code>headings</code>.\nAlso keep the first <code>&lt;h1&gt;</code> and place it onto <code>mainHeading</code>.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>    <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">sections</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">section</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">headings</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">heading</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n        <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">mainHeading</span> <span class=\"o\">=</span> <span class=\"nx\">heading</span>  <span class=\"k\">if</span> <span class=\"nx\">heading</span><span class=\"p\">.</span><span class=\"nx\">level</span> <span class=\"o\">is</span> <span class=\"mi\">1</span>\n        <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">headings</span><span class=\"p\">.</span><span class=\"nx\">push</span> <span class=\"nx\">heading</span></pre></div>",
          "anchor": "section-19",
          "headings": []
        },
        {
          "docsText": "- Invoke the callback.\n",
          "codeText": "    callback file\n\n",
          "docsHtml": "<ul>\n<li>Invoke the callback.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>    <span class=\"nx\">callback</span> <span class=\"nx\">file</span></pre></div>",
          "anchor": "section-20",
          "headings": []
        },
        {
          "docsText": "### File::highlight()\n",
          "codeText": "\n",
          "docsHtml": "<h3>File::highlight()</h3>",
          "codeHtml": "",
          "anchor": "File-highlight",
          "headings": [
            {
              "level": 3,
              "title": "File::highlight()",
              "anchor": "File-highlight",
              "htmlFile": "lib/lidoc/parser.html"
            }
          ]
        },
        {
          "docsText": "Adds to HTML fields to it `docsHtml` and `codeHtml` to all sections.\n\nHighlights a single chunk of CoffeeScript code, using **Pygments** over stdio,\nand runs the text of its corresponding comment through **Markdown**, using\n[Showdown.js](http://attacklab.net/showdown/).\n\nWe process the entire file in a single call to Pygments *[1]* by inserting\nlittle marker comments between each section *[1]* and then splitting the\nresult string wherever our markers occur *[2]*.\n",
          "codeText": "\nFile::highlight = (callback) ->\n",
          "docsHtml": "<p>Adds to HTML fields to it <code>docsHtml</code> and <code>codeHtml</code> to all sections.</p>\n\n<p>Highlights a single chunk of CoffeeScript code, using <strong>Pygments</strong> over stdio,\nand runs the text of its corresponding comment through <strong>Markdown</strong>, using\n<a href=\"http://attacklab.net/showdown/\">Showdown.js</a>.</p>\n\n<p>We process the entire file in a single call to Pygments <em>[1]</em> by inserting\nlittle marker comments between each section <em>[1]</em> and then splitting the\nresult string wherever our markers occur <em>[2]</em>.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">File</span><span class=\"o\">::</span><span class=\"nx\">highlight</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">callback</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span></pre></div>",
          "anchor": "section-22",
          "headings": []
        },
        {
          "docsText": "- The start and end of each Pygments highlight block.\n",
          "codeText": "  highlightStart = '<div class=\"highlight\"><pre>'\n  highlightEnd   = '</pre></div>'\n\n  showdown = require('../../vendor/showdown').Showdown\n  {spawn} = require 'child_process'\n\n  language = getLanguage @sourceFile\n  pygments = spawn 'pygmentize', [\n    '-l', language.name,\n    '-f', 'html',\n    '-O', 'encoding=utf-8,tabsize=2'\n  ]\n  output   = ''\n\n  pygments.stderr.on 'data',  (error)  ->\n    console.error error.toString() if error\n\n  pygments.stdin.on 'error',  (error)  ->\n    console.error 'Could not use Pygments to highlight the source.'\n    process.exit 1\n\n  pygments.stdout.on 'data', (result) ->\n    output += result if result\n\n  pygments.on 'exit', =>\n    output = output.replace(highlightStart, '').replace(highlightEnd, '')\n    fragments = output.split language.dividerHtml # [2]\n    for section, i in @sections\n      section.codeHtml = if fragments[i]\n        highlightStart + fragments[i] + highlightEnd\n      else\n        \"\"\n      section.docsHtml = showdown.makeHtml section.docsText\n\n    callback @sections\n\n  if pygments.stdin.writable\n    text = (section.codeText for section in @sections)\n    pygments.stdin.write text.join language.dividerText # [1]\n    pygments.stdin.end()\n\n",
          "docsHtml": "<ul>\n<li>The start and end of each Pygments highlight block.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>  <span class=\"nx\">highlightStart</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&#39;</span>\n  <span class=\"nx\">highlightEnd</span>   <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;/pre&gt;&lt;/div&gt;&#39;</span>\n\n  <span class=\"nx\">showdown</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;../../vendor/showdown&#39;</span><span class=\"p\">).</span><span class=\"nx\">Showdown</span>\n  <span class=\"p\">{</span><span class=\"nx\">spawn</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;child_process&#39;</span>\n\n  <span class=\"nx\">language</span> <span class=\"o\">=</span> <span class=\"nx\">getLanguage</span> <span class=\"err\">@</span><span class=\"nx\">sourceFile</span>\n  <span class=\"nx\">pygments</span> <span class=\"o\">=</span> <span class=\"nx\">spawn</span> <span class=\"s1\">&#39;pygmentize&#39;</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n    <span class=\"s1\">&#39;-l&#39;</span><span class=\"p\">,</span> <span class=\"nx\">language</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;-f&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;html&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;-O&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;encoding=utf-8,tabsize=2&#39;</span>\n  <span class=\"p\">]</span>\n  <span class=\"nx\">output</span>   <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n\n  <span class=\"nx\">pygments</span><span class=\"p\">.</span><span class=\"nx\">stderr</span><span class=\"p\">.</span><span class=\"kc\">on</span> <span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span>  <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span>  <span class=\"o\">-&gt;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span> <span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"nx\">error</span>\n\n  <span class=\"nx\">pygments</span><span class=\"p\">.</span><span class=\"nx\">stdin</span><span class=\"p\">.</span><span class=\"kc\">on</span> <span class=\"s1\">&#39;error&#39;</span><span class=\"p\">,</span>  <span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">)</span>  <span class=\"o\">-&gt;</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span> <span class=\"s1\">&#39;Could not use Pygments to highlight the source.&#39;</span>\n    <span class=\"nx\">process</span><span class=\"p\">.</span><span class=\"nx\">exit</span> <span class=\"mi\">1</span>\n\n  <span class=\"nx\">pygments</span><span class=\"p\">.</span><span class=\"nx\">stdout</span><span class=\"p\">.</span><span class=\"kc\">on</span> <span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nx\">output</span> <span class=\"o\">+=</span> <span class=\"nx\">result</span> <span class=\"k\">if</span> <span class=\"nx\">result</span>\n\n  <span class=\"nx\">pygments</span><span class=\"p\">.</span><span class=\"kc\">on</span> <span class=\"s1\">&#39;exit&#39;</span><span class=\"p\">,</span> <span class=\"o\">=&gt;</span>\n    <span class=\"nx\">output</span> <span class=\"o\">=</span> <span class=\"nx\">output</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">highlightStart</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">).</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">highlightEnd</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span>\n    <span class=\"nx\">fragments</span> <span class=\"o\">=</span> <span class=\"nx\">output</span><span class=\"p\">.</span><span class=\"nx\">split</span> <span class=\"nx\">language</span><span class=\"p\">.</span><span class=\"nx\">dividerHtml</span> <span class=\"c1\"># [2]</span>\n    <span class=\"k\">for</span> <span class=\"nx\">section</span><span class=\"p\">,</span> <span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"err\">@</span><span class=\"nx\">sections</span>\n      <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">codeHtml</span> <span class=\"o\">=</span> <span class=\"k\">if</span> <span class=\"nx\">fragments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span>\n        <span class=\"nx\">highlightStart</span> <span class=\"o\">+</span> <span class=\"nx\">fragments</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"nx\">highlightEnd</span>\n      <span class=\"k\">else</span>\n        <span class=\"s2\">&quot;&quot;</span>\n      <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">docsHtml</span> <span class=\"o\">=</span> <span class=\"nx\">showdown</span><span class=\"p\">.</span><span class=\"nx\">makeHtml</span> <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">docsText</span>\n\n    <span class=\"nx\">callback</span> <span class=\"err\">@</span><span class=\"nx\">sections</span>\n\n  <span class=\"k\">if</span> <span class=\"nx\">pygments</span><span class=\"p\">.</span><span class=\"nx\">stdin</span><span class=\"p\">.</span><span class=\"nx\">writable</span>\n    <span class=\"nx\">text</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">codeText</span> <span class=\"k\">for</span> <span class=\"nx\">section</span> <span class=\"k\">in</span> <span class=\"err\">@</span><span class=\"nx\">sections</span><span class=\"p\">)</span>\n    <span class=\"nx\">pygments</span><span class=\"p\">.</span><span class=\"nx\">stdin</span><span class=\"p\">.</span><span class=\"nx\">write</span> <span class=\"nx\">text</span><span class=\"p\">.</span><span class=\"nx\">join</span> <span class=\"nx\">language</span><span class=\"p\">.</span><span class=\"nx\">dividerText</span> <span class=\"c1\"># [1]</span>\n    <span class=\"nx\">pygments</span><span class=\"p\">.</span><span class=\"nx\">stdin</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">()</span></pre></div>",
          "anchor": "section-23",
          "headings": []
        },
        {
          "docsText": "### File::addHeadings()\n",
          "codeText": "\n",
          "docsHtml": "<h3>File::addHeadings()</h3>",
          "codeHtml": "",
          "anchor": "File-addHeadings",
          "headings": [
            {
              "level": 3,
              "title": "File::addHeadings()",
              "anchor": "File-addHeadings",
              "htmlFile": "lib/lidoc/parser.html"
            }
          ]
        },
        {
          "docsText": "Takes a `sections` array of **section** objects and adds *heading* and\n*anchor* so that they look like:\n\n    {\n      docsText: ...\n      docsHtml: ...\n      codeText: ...\n      codeHtml: ...\n      anchor: '...'\n      headings: [\n        { level: 3, title: 'Expanding sections', anchor: 'expanding-sections' },\n        ...\n      ]\n    }\n\n",
          "codeText": "File::addHeadings = ->\n  @sections.forEach (section, i) =>\n    section.buildHeadings @htmlFile, i\n\n",
          "docsHtml": "<p>Takes a <code>sections</code> array of <strong>section</strong> objects and adds <em>heading</em> and\n<em>anchor</em> so that they look like:</p>\n\n<pre><code>{\n  docsText: ...\n  docsHtml: ...\n  codeText: ...\n  codeHtml: ...\n  anchor: '...'\n  headings: [\n    { level: 3, title: 'Expanding sections', anchor: 'expanding-sections' },\n    ...\n  ]\n}\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">File</span><span class=\"o\">::</span><span class=\"nx\">addHeadings</span> <span class=\"o\">=</span> <span class=\"o\">-&gt;</span>\n  <span class=\"err\">@</span><span class=\"nx\">sections</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">section</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n    <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">buildHeadings</span> <span class=\"err\">@</span><span class=\"nx\">htmlFile</span><span class=\"p\">,</span> <span class=\"nx\">i</span></pre></div>",
          "anchor": "section-25",
          "headings": []
        },
        {
          "docsText": "### parseCode()\n",
          "codeText": "\n",
          "docsHtml": "<h3>parseCode()</h3>",
          "codeHtml": "",
          "anchor": "parseCode",
          "headings": [
            {
              "level": 3,
              "title": "parseCode()",
              "anchor": "parseCode",
              "htmlFile": "lib/lidoc/parser.html"
            }
          ]
        },
        {
          "docsText": "Given a string of source code `code` with filename `source`, parse out each\ncomment and the code that follows it, and create an individual **section**\nfor it.  Sections take the form:\n\n    {\n      docsText: ...\n      codeText: ...\n    }\n\nReturns an array of sections.\n\n",
          "codeText": "parseCode = (source, code) ->\n  lines    = code.split '\\n'\n  sections = []\n  language = getLanguage source\n  hasCode  = docsText = codeText = ''\n\n  save = (docsText, codeText) ->\n    sections.push new Section\n      docsText: docsText\n      codeText: codeText\n\n  for line in lines\n    if line.match(language.commentMatcher) and not line.match(language.commentFilter)\n      if hasCode\n        save docsText, codeText\n        hasCode = docsText = codeText = ''\n      docsText += line.replace(language.commentMatcher, '') + '\\n'\n    else\n      hasCode = yes\n      codeText += line + '\\n'\n  save docsText, codeText\n  sections\n\n",
          "docsHtml": "<p>Given a string of source code <code>code</code> with filename <code>source</code>, parse out each\ncomment and the code that follows it, and create an individual <strong>section</strong>\nfor it.  Sections take the form:</p>\n\n<pre><code>{\n  docsText: ...\n  codeText: ...\n}\n</code></pre>\n\n<p>Returns an array of sections.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">parseCode</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">,</span> <span class=\"nx\">code</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">lines</span>    <span class=\"o\">=</span> <span class=\"nx\">code</span><span class=\"p\">.</span><span class=\"nx\">split</span> <span class=\"s1\">&#39;\\n&#39;</span>\n  <span class=\"nx\">sections</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n  <span class=\"nx\">language</span> <span class=\"o\">=</span> <span class=\"nx\">getLanguage</span> <span class=\"nx\">source</span>\n  <span class=\"nx\">hasCode</span>  <span class=\"o\">=</span> <span class=\"nx\">docsText</span> <span class=\"o\">=</span> <span class=\"nx\">codeText</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n\n  <span class=\"nx\">save</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">docsText</span><span class=\"p\">,</span> <span class=\"nx\">codeText</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nx\">sections</span><span class=\"p\">.</span><span class=\"nx\">push</span> <span class=\"k\">new</span> <span class=\"nx\">Section</span>\n      <span class=\"nv\">docsText: </span><span class=\"nx\">docsText</span>\n      <span class=\"nv\">codeText: </span><span class=\"nx\">codeText</span>\n\n  <span class=\"k\">for</span> <span class=\"nx\">line</span> <span class=\"k\">in</span> <span class=\"nx\">lines</span>\n    <span class=\"k\">if</span> <span class=\"nx\">line</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"nx\">language</span><span class=\"p\">.</span><span class=\"nx\">commentMatcher</span><span class=\"p\">)</span> <span class=\"o\">and</span> <span class=\"o\">not</span> <span class=\"nx\">line</span><span class=\"p\">.</span><span class=\"nx\">match</span><span class=\"p\">(</span><span class=\"nx\">language</span><span class=\"p\">.</span><span class=\"nx\">commentFilter</span><span class=\"p\">)</span>\n      <span class=\"k\">if</span> <span class=\"nx\">hasCode</span>\n        <span class=\"nx\">save</span> <span class=\"nx\">docsText</span><span class=\"p\">,</span> <span class=\"nx\">codeText</span>\n        <span class=\"nx\">hasCode</span> <span class=\"o\">=</span> <span class=\"nx\">docsText</span> <span class=\"o\">=</span> <span class=\"nx\">codeText</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>\n      <span class=\"nx\">docsText</span> <span class=\"o\">+=</span> <span class=\"nx\">line</span><span class=\"p\">.</span><span class=\"nx\">replace</span><span class=\"p\">(</span><span class=\"nx\">language</span><span class=\"p\">.</span><span class=\"nx\">commentMatcher</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;\\n&#39;</span>\n    <span class=\"k\">else</span>\n      <span class=\"nx\">hasCode</span> <span class=\"o\">=</span> <span class=\"kc\">yes</span>\n      <span class=\"nx\">codeText</span> <span class=\"o\">+=</span> <span class=\"nx\">line</span> <span class=\"o\">+</span> <span class=\"s1\">&#39;\\n&#39;</span>\n  <span class=\"nx\">save</span> <span class=\"nx\">docsText</span><span class=\"p\">,</span> <span class=\"nx\">codeText</span>\n  <span class=\"nx\">sections</span></pre></div>",
          "anchor": "section-27",
          "headings": []
        },
        {
          "docsText": "### Page.createAll()\n",
          "codeText": "\n",
          "docsHtml": "<h3>Page.createAll()</h3>",
          "codeHtml": "",
          "anchor": "Page-createAll",
          "headings": [
            {
              "level": 3,
              "title": "Page.createAll()",
              "anchor": "Page-createAll",
              "htmlFile": "lib/lidoc/parser.html"
            }
          ]
        },
        {
          "docsText": "Collects the `<h1>` headings in the given files and returns a list of them.\n\n`files` a key/value object of many `File` instances.\n\nReturns an key/value object of `Page` instances, with keys being the Page\ntitles.\n\n",
          "codeText": "Page.createAll = (files) ->\n  pages = {}\n  for fname, file of files\n\n    current = null\n    file.headings.forEach (heading) ->\n      if heading.level is 1\n        current = \"#{heading.title}\"\n\n",
          "docsHtml": "<p>Collects the <code>&lt;h1&gt;</code> headings in the given files and returns a list of them.</p>\n\n<p><code>files</code> a key/value object of many <code>File</code> instances.</p>\n\n<p>Returns an key/value object of <code>Page</code> instances, with keys being the Page\ntitles.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">Page</span><span class=\"p\">.</span><span class=\"nx\">createAll</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">files</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">pages</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n  <span class=\"k\">for</span> <span class=\"nx\">fname</span><span class=\"p\">,</span> <span class=\"nx\">file</span> <span class=\"k\">of</span> <span class=\"nx\">files</span>\n\n    <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">headings</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">heading</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"k\">if</span> <span class=\"nx\">heading</span><span class=\"p\">.</span><span class=\"nx\">level</span> <span class=\"o\">is</span> <span class=\"mi\">1</span>\n        <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;#{heading.title}&quot;</span></pre></div>",
          "anchor": "section-29",
          "headings": []
        },
        {
          "docsText": "- If there is already a page with the same title, append the filename\n in there.\n",
          "codeText": "        if pages[current]\n          current = \"#{heading.title} (#{fname})\"\n\n        pages[current] = new Page\n          title: heading.title\n          htmlFile: fname\n          headings: []\n\n      else\n        if pages[current]?\n          pages[current].headings.push heading\n\n  pages\n\n",
          "docsHtml": "<ul>\n<li>If there is already a page with the same title, append the filename\nin there.</li>\n</ul>",
          "codeHtml": "<div class=\"highlight\"><pre>        <span class=\"k\">if</span> <span class=\"nx\">pages</span><span class=\"p\">[</span><span class=\"nx\">current</span><span class=\"p\">]</span>\n          <span class=\"nx\">current</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;#{heading.title} (#{fname})&quot;</span>\n\n        <span class=\"nx\">pages</span><span class=\"p\">[</span><span class=\"nx\">current</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Page</span>\n          <span class=\"nv\">title: </span><span class=\"nx\">heading</span><span class=\"p\">.</span><span class=\"nx\">title</span>\n          <span class=\"nv\">htmlFile: </span><span class=\"nx\">fname</span>\n          <span class=\"nv\">headings: </span><span class=\"p\">[]</span>\n\n      <span class=\"k\">else</span>\n        <span class=\"k\">if</span> <span class=\"nx\">pages</span><span class=\"p\">[</span><span class=\"nx\">current</span><span class=\"p\">]</span><span class=\"o\">?</span>\n          <span class=\"nx\">pages</span><span class=\"p\">[</span><span class=\"nx\">current</span><span class=\"p\">].</span><span class=\"nx\">headings</span><span class=\"p\">.</span><span class=\"nx\">push</span> <span class=\"nx\">heading</span>\n\n  <span class=\"nx\">pages</span></pre></div>",
          "anchor": "section-30",
          "headings": []
        },
        {
          "docsText": "### Section::buildHeadings()\n",
          "codeText": "\n",
          "docsHtml": "<h3>Section::buildHeadings()</h3>",
          "codeHtml": "",
          "anchor": "Section-buildHeadings",
          "headings": [
            {
              "level": 3,
              "title": "Section::buildHeadings()",
              "anchor": "Section-buildHeadings",
              "htmlFile": "lib/lidoc/parser.html"
            }
          ]
        },
        {
          "docsText": "Sets `headings` and `anchor` for the section. The assumption is that this is\nbeing done after the sections were pygmentized.\n\n",
          "codeText": "Section::buildHeadings = (htmlFile, i) ->\n  @headings = []\n\n  m = @docsHtml.match /<h[1-6]>.*?<\\/h[1-6]>/ig\n  if m?\n    m.forEach (match) =>\n      mm = match.match /<h([1-6])>(.*?)<\\/h[1-6]>/i\n      @anchor = slugify(mm[2])\n      level = parseInt(mm[1])\n      if level <= 3\n        @headings.push new Heading\n          level: level\n          title: mm[2]\n          anchor: slugify(mm[2])\n          htmlFile: htmlFile\n\n  else\n    @anchor = \"section-#{i}\"\n\nmodule.exports = {parse}\n\n",
          "docsHtml": "<p>Sets <code>headings</code> and <code>anchor</code> for the section. The assumption is that this is\nbeing done after the sections were pygmentized.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">Section</span><span class=\"o\">::</span><span class=\"nx\">buildHeadings</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">htmlFile</span><span class=\"p\">,</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"err\">@</span><span class=\"nx\">headings</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n  <span class=\"nx\">m</span> <span class=\"o\">=</span> <span class=\"err\">@</span><span class=\"nx\">docsHtml</span><span class=\"p\">.</span><span class=\"nx\">match</span> <span class=\"o\">/&lt;</span><span class=\"nx\">h</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">.</span><span class=\"o\">*?&lt;</span><span class=\"err\">\\</span><span class=\"o\">/</span><span class=\"nx\">h</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"err\">/ig</span>\n  <span class=\"k\">if</span> <span class=\"nx\">m</span><span class=\"o\">?</span>\n    <span class=\"nx\">m</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">match</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n      <span class=\"nx\">mm</span> <span class=\"o\">=</span> <span class=\"nx\">match</span><span class=\"p\">.</span><span class=\"nx\">match</span> <span class=\"o\">/&lt;</span><span class=\"nx\">h</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">])</span><span class=\"o\">&gt;</span><span class=\"p\">(.</span><span class=\"o\">*?</span><span class=\"p\">)</span><span class=\"o\">&lt;</span><span class=\"err\">\\</span><span class=\"o\">/</span><span class=\"nx\">h</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"mi\">6</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"err\">/i</span>\n      <span class=\"err\">@</span><span class=\"nx\">anchor</span> <span class=\"o\">=</span> <span class=\"nx\">slugify</span><span class=\"p\">(</span><span class=\"nx\">mm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n      <span class=\"nx\">level</span> <span class=\"o\">=</span> <span class=\"nb\">parseInt</span><span class=\"p\">(</span><span class=\"nx\">mm</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n      <span class=\"k\">if</span> <span class=\"nx\">level</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">3</span>\n        <span class=\"err\">@</span><span class=\"nx\">headings</span><span class=\"p\">.</span><span class=\"nx\">push</span> <span class=\"k\">new</span> <span class=\"nx\">Heading</span>\n          <span class=\"nv\">level: </span><span class=\"nx\">level</span>\n          <span class=\"nv\">title: </span><span class=\"nx\">mm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n          <span class=\"nv\">anchor: </span><span class=\"nx\">slugify</span><span class=\"p\">(</span><span class=\"nx\">mm</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span>\n          <span class=\"nv\">htmlFile: </span><span class=\"nx\">htmlFile</span>\n\n  <span class=\"k\">else</span>\n    <span class=\"err\">@</span><span class=\"nx\">anchor</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;section-#{i}&quot;</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nx\">parse</span><span class=\"p\">}</span>\n\n</pre></div>",
          "anchor": "section-32",
          "headings": []
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "Lidoc.Parser",
          "anchor": "Lidoc-Parser",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "parse()",
          "anchor": "parse",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 2,
          "title": "Private API",
          "anchor": "Private-API",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "Project::buildIndices()",
          "anchor": "Project-buildIndices",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "File.create()",
          "anchor": "File-create",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "File::highlight()",
          "anchor": "File-highlight",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "File::addHeadings()",
          "anchor": "File-addHeadings",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "parseCode()",
          "anchor": "parseCode",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "Page.createAll()",
          "anchor": "Page-createAll",
          "htmlFile": "lib/lidoc/parser.html"
        },
        {
          "level": 3,
          "title": "Section::buildHeadings()",
          "anchor": "Section-buildHeadings",
          "htmlFile": "lib/lidoc/parser.html"
        }
      ],
      "sourceFile": "lib/lidoc/parser.coffee",
      "baseSourceFile": "parser.coffee",
      "mainHeading": {
        "level": 1,
        "title": "Lidoc.Parser",
        "anchor": "Lidoc-Parser",
        "htmlFile": "lib/lidoc/parser.html"
      }
    },
    "lib/lidoc/structs.coffee": {
      "htmlFile": "lib/lidoc/structs.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "structs.html",
      "sections": [
        {
          "docsText": "# Lidoc.Structs\n",
          "codeText": "\n",
          "docsHtml": "<h1>Lidoc.Structs</h1>",
          "codeHtml": "",
          "anchor": "Lidoc-Structs",
          "headings": [
            {
              "level": 1,
              "title": "Lidoc.Structs",
              "anchor": "Lidoc-Structs",
              "htmlFile": "lib/lidoc/structs.html"
            }
          ]
        },
        {
          "docsText": "Structures. You can access these from {Lidoc} itself:\n\n    Lidoc = require('lidoc')\n\n    Lidoc.Page\n    Lidoc.Project\n",
          "codeText": "\n",
          "docsHtml": "<p>Structures. You can access these from {Lidoc} itself:</p>\n\n<pre><code>Lidoc = require('lidoc')\n\nLidoc.Page\nLidoc.Project\n</code></pre>",
          "codeHtml": "",
          "anchor": "section-1",
          "headings": []
        },
        {
          "docsText": "## Struct\n",
          "codeText": "\n",
          "docsHtml": "<h2>Struct</h2>",
          "codeHtml": "",
          "anchor": "Struct",
          "headings": [
            {
              "level": 2,
              "title": "Struct",
              "anchor": "Struct",
              "htmlFile": "lib/lidoc/structs.html"
            }
          ]
        },
        {
          "docsText": "Basic superclass of all structs.\n\n",
          "codeText": "class Struct\n  constructor: (source) ->\n    for key, value of source\n      @[key] = value\n\n",
          "docsHtml": "<p>Basic superclass of all structs.</p>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">class</span> <span class=\"nx\">Struct</span>\n  <span class=\"nv\">constructor: </span><span class=\"p\">(</span><span class=\"nx\">source</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"k\">for</span> <span class=\"nx\">key</span><span class=\"p\">,</span> <span class=\"nx\">value</span> <span class=\"k\">of</span> <span class=\"nx\">source</span>\n      <span class=\"err\">@</span><span class=\"p\">[</span><span class=\"nx\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">value</span></pre></div>",
          "anchor": "section-3",
          "headings": []
        },
        {
          "docsText": "## Project\n",
          "codeText": "\n",
          "docsHtml": "<h2>Project</h2>",
          "codeHtml": "",
          "anchor": "Project",
          "headings": [
            {
              "level": 2,
              "title": "Project",
              "anchor": "Project",
              "htmlFile": "lib/lidoc/structs.html"
            }
          ]
        },
        {
          "docsText": "Holds indexes of `Page`s and `File`s.\n\nThis is also the output of `parse()`.\n\n    {\n      pages: {\n        'Parser': { Page },\n        'Helpers': { Page },\n        ...\n      },\n      files: {\n        'index.html': { File },\n        'lib/parser.html': { File },\n        '...'\n      },\n      fileTree: { Filetree }\n    }\n\n",
          "codeText": "class Project extends Struct\n  constructor: ->\n    @pages = {}\n    @files = {}\n    @fileTree = {}\n    super\n\n",
          "docsHtml": "<p>Holds indexes of <code>Page</code>s and <code>File</code>s.</p>\n\n<p>This is also the output of <code>parse()</code>.</p>\n\n<pre><code>{\n  pages: {\n    'Parser': { Page },\n    'Helpers': { Page },\n    ...\n  },\n  files: {\n    'index.html': { File },\n    'lib/parser.html': { File },\n    '...'\n  },\n  fileTree: { Filetree }\n}\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">class</span> <span class=\"nx\">Project</span> <span class=\"k\">extends</span> <span class=\"nx\">Struct</span>\n  <span class=\"nv\">constructor: </span><span class=\"o\">-&gt;</span>\n    <span class=\"err\">@</span><span class=\"nx\">pages</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"err\">@</span><span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"err\">@</span><span class=\"nx\">fileTree</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">super</span></pre></div>",
          "anchor": "section-5",
          "headings": []
        },
        {
          "docsText": "## Page\n",
          "codeText": "\n",
          "docsHtml": "<h2>Page</h2>",
          "codeHtml": "",
          "anchor": "Page",
          "headings": [
            {
              "level": 2,
              "title": "Page",
              "anchor": "Page",
              "htmlFile": "lib/lidoc/structs.html"
            }
          ]
        },
        {
          "docsText": "Extracted from `<h1>`s of files. Looks like this:\n\n    {\n      title: \"Helpers\",\n      htmlFile: \"lib/helpers.html\",\n      headings: [ Heading, Heading, ... ]\n    }\n\n",
          "codeText": "class Page extends Struct\n  constructor: ->\n    @title    = null\n    @htmlFile = null\n    @headings = []\n    super\n\n",
          "docsHtml": "<p>Extracted from <code>&lt;h1&gt;</code>s of files. Looks like this:</p>\n\n<pre><code>{\n  title: \"Helpers\",\n  htmlFile: \"lib/helpers.html\",\n  headings: [ Heading, Heading, ... ]\n}\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">class</span> <span class=\"nx\">Page</span> <span class=\"k\">extends</span> <span class=\"nx\">Struct</span>\n  <span class=\"nv\">constructor: </span><span class=\"o\">-&gt;</span>\n    <span class=\"err\">@</span><span class=\"nx\">title</span>    <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">htmlFile</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">headings</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">super</span></pre></div>",
          "anchor": "section-7",
          "headings": []
        },
        {
          "docsText": "## Heading\n",
          "codeText": "\n",
          "docsHtml": "<h2>Heading</h2>",
          "codeHtml": "",
          "anchor": "Heading",
          "headings": [
            {
              "level": 2,
              "title": "Heading",
              "anchor": "Heading",
              "htmlFile": "lib/lidoc/structs.html"
            }
          ]
        },
        {
          "docsText": "A h1, h2 or h3 heading. Looks like:\n\n    {\n      level: 2,\n      title: \"parse()',\n      anchor: \"parse\",\n      htmlFile: \"lib/parser.html\"\n    }\n\n",
          "codeText": "class Heading extends Struct\n  constructor: ->\n    @level    = null\n    @title    = null\n    @anchor   = null\n    @htmlFile = null\n    super\n\n",
          "docsHtml": "<p>A h1, h2 or h3 heading. Looks like:</p>\n\n<pre><code>{\n  level: 2,\n  title: \"parse()',\n  anchor: \"parse\",\n  htmlFile: \"lib/parser.html\"\n}\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">class</span> <span class=\"nx\">Heading</span> <span class=\"k\">extends</span> <span class=\"nx\">Struct</span>\n  <span class=\"nv\">constructor: </span><span class=\"o\">-&gt;</span>\n    <span class=\"err\">@</span><span class=\"nx\">level</span>    <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">title</span>    <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">anchor</span>   <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">htmlFile</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"k\">super</span></pre></div>",
          "anchor": "section-9",
          "headings": []
        },
        {
          "docsText": "## File\n",
          "codeText": "\n",
          "docsHtml": "<h2>File</h2>",
          "codeHtml": "",
          "anchor": "File",
          "headings": [
            {
              "level": 2,
              "title": "File",
              "anchor": "File",
              "htmlFile": "lib/lidoc/structs.html"
            }
          ]
        },
        {
          "docsText": "Represents a source file and it's generated HTML file. Stores code/docs in\n`sections`. Looks like this:\n\n    {\n      htmlFile: 'lib/parser.js.html',\n      sourceName: 'lib/parser.js.coffee',\n      baseHtmlFile: 'parser.js.html',\n      baseSourceName: 'parser.js.coffee',\n      extension: 'coffee',\n      sections: [ Section, ... ]\n      headings: [ Heading, ... ]\n    }\n\nIt's built with `File.create`:\n\n    File.create 'lib/parser.js.coffee', false, (file) ->\n      console.log file\n      # `file` is a File object\n\n",
          "codeText": "class File extends Struct\n  constructor: ->\n    @htmlFile       = null\n    @sourceName     = null\n    @extension      = null\n    @baseSourceName = null\n    @baseHtmlFile   = null\n    @sections       = []\n    @headings       = []\n    super\n\n",
          "docsHtml": "<p>Represents a source file and it's generated HTML file. Stores code/docs in\n<code>sections</code>. Looks like this:</p>\n\n<pre><code>{\n  htmlFile: 'lib/parser.js.html',\n  sourceName: 'lib/parser.js.coffee',\n  baseHtmlFile: 'parser.js.html',\n  baseSourceName: 'parser.js.coffee',\n  extension: 'coffee',\n  sections: [ Section, ... ]\n  headings: [ Heading, ... ]\n}\n</code></pre>\n\n<p>It's built with <code>File.create</code>:</p>\n\n<pre><code>File.create 'lib/parser.js.coffee', false, (file) -&gt;\n  console.log file\n  # `file` is a File object\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">class</span> <span class=\"nx\">File</span> <span class=\"k\">extends</span> <span class=\"nx\">Struct</span>\n  <span class=\"nv\">constructor: </span><span class=\"o\">-&gt;</span>\n    <span class=\"err\">@</span><span class=\"nx\">htmlFile</span>       <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">sourceName</span>     <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">extension</span>      <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">baseSourceName</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">baseHtmlFile</span>   <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">sections</span>       <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"err\">@</span><span class=\"nx\">headings</span>       <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">super</span></pre></div>",
          "anchor": "section-11",
          "headings": []
        },
        {
          "docsText": "## Section\n",
          "codeText": "\n",
          "docsHtml": "<h2>Section</h2>",
          "codeHtml": "",
          "anchor": "Section",
          "headings": [
            {
              "level": 2,
              "title": "Section",
              "anchor": "Section",
              "htmlFile": "lib/lidoc/structs.html"
            }
          ]
        },
        {
          "docsText": "Represents a comment/code block pair.\n\n    {\n      docsText: '# Parsing code ...'\n      docsHtml: '<h3>Parsing code</h3> ...'\n\n      codeText: 'def parsingCode() ...'\n      codeHtml: '...'\n\n      anchor: 'Parsing-code'\n    }\n\n",
          "codeText": "class Section extends Struct\n  constructor: ->\n    @docsText = null\n    @codeText = null\n    @docsHtml = null\n    @codeHtml = null\n    @anchor = null\n    super\n\nmodule.exports = {Section, File, Project, Page, Heading}\n\n",
          "docsHtml": "<p>Represents a comment/code block pair.</p>\n\n<pre><code>{\n  docsText: '# Parsing code ...'\n  docsHtml: '&lt;h3&gt;Parsing code&lt;/h3&gt; ...'\n\n  codeText: 'def parsingCode() ...'\n  codeHtml: '...'\n\n  anchor: 'Parsing-code'\n}\n</code></pre>",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">class</span> <span class=\"nx\">Section</span> <span class=\"k\">extends</span> <span class=\"nx\">Struct</span>\n  <span class=\"nv\">constructor: </span><span class=\"o\">-&gt;</span>\n    <span class=\"err\">@</span><span class=\"nx\">docsText</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">codeText</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">docsHtml</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">codeHtml</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"err\">@</span><span class=\"nx\">anchor</span> <span class=\"o\">=</span> <span class=\"kc\">null</span>\n    <span class=\"k\">super</span>\n\n<span class=\"nx\">module</span><span class=\"p\">.</span><span class=\"nx\">exports</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nx\">Section</span><span class=\"p\">,</span> <span class=\"nx\">File</span><span class=\"p\">,</span> <span class=\"nx\">Project</span><span class=\"p\">,</span> <span class=\"nx\">Page</span><span class=\"p\">,</span> <span class=\"nx\">Heading</span><span class=\"p\">}</span>\n\n</pre></div>",
          "anchor": "section-13",
          "headings": []
        }
      ],
      "headings": [
        {
          "level": 1,
          "title": "Lidoc.Structs",
          "anchor": "Lidoc-Structs",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "Struct",
          "anchor": "Struct",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "Project",
          "anchor": "Project",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "Page",
          "anchor": "Page",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "Heading",
          "anchor": "Heading",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "File",
          "anchor": "File",
          "htmlFile": "lib/lidoc/structs.html"
        },
        {
          "level": 2,
          "title": "Section",
          "anchor": "Section",
          "htmlFile": "lib/lidoc/structs.html"
        }
      ],
      "sourceFile": "lib/lidoc/structs.coffee",
      "baseSourceFile": "structs.coffee",
      "mainHeading": {
        "level": 1,
        "title": "Lidoc.Structs",
        "anchor": "Lidoc-Structs",
        "htmlFile": "lib/lidoc/structs.html"
      }
    },
    "test/build_test.coffee": {
      "htmlFile": "test/build_test.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "build_test.html",
      "sections": [
        {
          "docsText": "",
          "codeText": "require 'test/env'\nfs = require 'fs'\npath = require 'path'\nos = require 'os'\nrimraf = require 'rimraf'\n\nfiles = [\n  'test/fixture/README.md'\n  'test/fixture/actor.js'\n]\n\nVows\n  .describe('Lidoc builder')\n  .addBatch\n    'Builder':\n      topic: ->\n        @output = path.join os.tmpDir(), \"lidoc#{Math.random()}\"\n        options = files: files, quiet: true, output: @output\n\n        Lidoc.parse options, (project) =>\n          Lidoc.build project, options, =>\n            @callback()\n\n      'should build files': ->\n        files = [\n          'index.html'\n          'test/fixture/actor.html'\n          'style.css'\n          'script.js'\n        ]\n        files.forEach (file) =>\n          fn = path.join(@output, file)\n          assert.nonEmptyFile fn\n\n      teardown: ->\n        rimraf @output, (err, result) ->\n          console.log 'rmdir', err, result\n\n  .export(module)\n\n",
          "docsHtml": "",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">require</span> <span class=\"s1\">&#39;test/env&#39;</span>\n<span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;fs&#39;</span>\n<span class=\"nx\">path</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;path&#39;</span>\n<span class=\"nx\">os</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;os&#39;</span>\n<span class=\"nx\">rimraf</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;rimraf&#39;</span>\n\n<span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s1\">&#39;test/fixture/README.md&#39;</span>\n  <span class=\"s1\">&#39;test/fixture/actor.js&#39;</span>\n<span class=\"p\">]</span>\n\n<span class=\"nx\">Vows</span>\n  <span class=\"p\">.</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">&#39;Lidoc builder&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">addBatch</span>\n    <span class=\"s1\">&#39;Builder&#39;</span><span class=\"o\">:</span>\n      <span class=\"nv\">topic: </span><span class=\"o\">-&gt;</span>\n        <span class=\"err\">@</span><span class=\"nx\">output</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span> <span class=\"nx\">os</span><span class=\"p\">.</span><span class=\"nx\">tmpDir</span><span class=\"p\">(),</span> <span class=\"s2\">&quot;lidoc#{Math.random()}&quot;</span>\n        <span class=\"nx\">options</span> <span class=\"o\">=</span> <span class=\"nv\">files: </span><span class=\"nx\">files</span><span class=\"p\">,</span> <span class=\"nv\">quiet: </span><span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"nv\">output: </span><span class=\"err\">@</span><span class=\"nx\">output</span>\n\n        <span class=\"nx\">Lidoc</span><span class=\"p\">.</span><span class=\"nx\">parse</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n          <span class=\"nx\">Lidoc</span><span class=\"p\">.</span><span class=\"nx\">build</span> <span class=\"nx\">project</span><span class=\"p\">,</span> <span class=\"nx\">options</span><span class=\"p\">,</span> <span class=\"o\">=&gt;</span>\n            <span class=\"err\">@</span><span class=\"nx\">callback</span><span class=\"p\">()</span>\n\n      <span class=\"s1\">&#39;should build files&#39;</span><span class=\"o\">:</span> <span class=\"o\">-&gt;</span>\n        <span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n          <span class=\"s1\">&#39;index.html&#39;</span>\n          <span class=\"s1\">&#39;test/fixture/actor.html&#39;</span>\n          <span class=\"s1\">&#39;style.css&#39;</span>\n          <span class=\"s1\">&#39;script.js&#39;</span>\n        <span class=\"p\">]</span>\n        <span class=\"nx\">files</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n          <span class=\"nx\">fn</span> <span class=\"o\">=</span> <span class=\"nx\">path</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"nx\">output</span><span class=\"p\">,</span> <span class=\"nx\">file</span><span class=\"p\">)</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">nonEmptyFile</span> <span class=\"nx\">fn</span>\n\n      <span class=\"nv\">teardown: </span><span class=\"o\">-&gt;</span>\n        <span class=\"nx\">rimraf</span> <span class=\"err\">@</span><span class=\"nx\">output</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span> <span class=\"s1\">&#39;rmdir&#39;</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">result</span>\n\n  <span class=\"p\">.</span><span class=\"nx\">export</span><span class=\"p\">(</span><span class=\"nx\">module</span><span class=\"p\">)</span>\n\n</pre></div>",
          "anchor": "section-0",
          "headings": []
        }
      ],
      "headings": [],
      "sourceFile": "test/build_test.coffee",
      "baseSourceFile": "build_test.coffee"
    },
    "test/env.coffee": {
      "htmlFile": "test/env.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "env.html",
      "sections": [
        {
          "docsText": "",
          "codeText": "fs = require 'fs'\n\nglobal.Vows = require(\"vows\")\nglobal.assert = require(\"assert\")\nglobal.Lidoc = require(\"lib/lidoc\")\n\nassert.nonEmptyFile = (fname) ->\n  fs.readFile fname, (err, data) ->\n    assert.isNull err\n    assert data.length > 0\n\n\n",
          "docsHtml": "",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">fs</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s1\">&#39;fs&#39;</span>\n\n<span class=\"nx\">global</span><span class=\"p\">.</span><span class=\"nx\">Vows</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;vows&quot;</span><span class=\"p\">)</span>\n<span class=\"nx\">global</span><span class=\"p\">.</span><span class=\"nx\">assert</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;assert&quot;</span><span class=\"p\">)</span>\n<span class=\"nx\">global</span><span class=\"p\">.</span><span class=\"nx\">Lidoc</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;lib/lidoc&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">nonEmptyFile</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">fname</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n  <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFile</span> <span class=\"nx\">fname</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">data</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n    <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isNull</span> <span class=\"nx\">err</span>\n    <span class=\"nx\">assert</span> <span class=\"nx\">data</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n\n</pre></div>",
          "anchor": "section-0",
          "headings": []
        }
      ],
      "headings": [],
      "sourceFile": "test/env.coffee",
      "baseSourceFile": "env.coffee"
    },
    "test/lidoc_test.coffee": {
      "htmlFile": "test/lidoc_test.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "lidoc_test.html",
      "sections": [
        {
          "docsText": "",
          "codeText": "require 'test/env'\n\nVows\n  .describe('Lidoc')\n  .addBatch\n    'Lidoc':\n      'should have version': ->\n        assert.isString Lidoc.version\n        assert Lidoc.version.match /^[0-9]+\\.[0-9]+\\.[0-9]+/\n      'should have methods': ->\n        assert.isFunction Lidoc.parse\n        assert.isFunction Lidoc.build\n\n  .export(module)\n\n",
          "docsHtml": "",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">require</span> <span class=\"s1\">&#39;test/env&#39;</span>\n\n<span class=\"nx\">Vows</span>\n  <span class=\"p\">.</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">&#39;Lidoc&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">addBatch</span>\n    <span class=\"s1\">&#39;Lidoc&#39;</span><span class=\"o\">:</span>\n      <span class=\"s1\">&#39;should have version&#39;</span><span class=\"o\">:</span> <span class=\"o\">-&gt;</span>\n        <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isString</span> <span class=\"nx\">Lidoc</span><span class=\"p\">.</span><span class=\"nx\">version</span>\n        <span class=\"nx\">assert</span> <span class=\"nx\">Lidoc</span><span class=\"p\">.</span><span class=\"nx\">version</span><span class=\"p\">.</span><span class=\"nx\">match</span> <span class=\"o\">/^</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"err\">\\</span><span class=\"p\">.[</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"err\">\\</span><span class=\"p\">.[</span><span class=\"mi\">0</span><span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"err\">/</span>\n      <span class=\"s1\">&#39;should have methods&#39;</span><span class=\"o\">:</span> <span class=\"o\">-&gt;</span>\n        <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isFunction</span> <span class=\"nx\">Lidoc</span><span class=\"p\">.</span><span class=\"nx\">parse</span>\n        <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isFunction</span> <span class=\"nx\">Lidoc</span><span class=\"p\">.</span><span class=\"nx\">build</span>\n\n  <span class=\"p\">.</span><span class=\"nx\">export</span><span class=\"p\">(</span><span class=\"nx\">module</span><span class=\"p\">)</span>\n\n</pre></div>",
          "anchor": "section-0",
          "headings": []
        }
      ],
      "headings": [],
      "sourceFile": "test/lidoc_test.coffee",
      "baseSourceFile": "lidoc_test.coffee"
    },
    "test/parser_test.coffee": {
      "htmlFile": "test/parser_test.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "parser_test.html",
      "sections": [
        {
          "docsText": "",
          "codeText": "require \"test/env\"\n\nfiles = [\n  'test/fixture/README.md',\n  'test/fixture/parser.js'\n]\n\nVows\n  .describe('Lidoc parser')\n  .addBatch\n    'Parsing the fixture':\n      topic: ->\n        Lidoc.parse files: files, quiet: true, (project) =>\n          @callback null, project\n\n      'should have pages': (project) ->\n        assert.isObject project.pages\n\n      'should have files': (project) ->\n        assert.isObject project.files\n\n      'README':\n        topic: (project) ->\n          project.files['test/fixture/README.md']\n\n        'should have an index.html': (readme) ->\n          assert.equal readme.htmlFile, 'index.html'\n\n        'should have the right sourceFile': (readme) ->\n          assert.equal readme.sourceFile, 'test/fixture/README.md'\n\n        'should have the correct number of sections': (readme) ->\n          assert.equal readme.sections.length, 3\n\n      'parser.js':\n        topic: (project) ->\n          project.files['test/fixture/parser.js']\n\n        'should have the right attributes': (file) ->\n          assert.equal file.htmlFile, 'test/fixture/parser.html'\n          assert.equal file.sourceFile, 'test/fixture/parser.js'\n\n        'should have a main heading': (file) ->\n          assert.equal file.mainHeading.level, 1\n          assert.equal file.mainHeading.title, 'Parser object'\n\n        'sections should have something': (file) ->\n          assert.isArray file.sections\n          file.sections.forEach (section) ->\n            assert.isString section.docsHtml\n            assert.isString section.codeHtml\n            assert.isString section.docsText\n            assert.isString section.codeText\n\n        'sections should have anchors': (file) ->\n          assert.equal file.sections[0].anchor, 'Parser-object'\n          assert.equal file.sections[1].anchor, 'parse'\n\n        'sections should have headings': (file) ->\n          file.sections.forEach (section) ->\n            assert.isArray section.headings\n            assert section.headings.length >= 0\n\n        'sections should have rendered': (file) ->\n          file.sections.forEach (section) ->\n            assert section.docsHtml.length >= 0\n\n  .export(module)\n\n",
          "docsHtml": "",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">require</span> <span class=\"s2\">&quot;test/env&quot;</span>\n\n<span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s1\">&#39;test/fixture/README.md&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;test/fixture/parser.js&#39;</span>\n<span class=\"p\">]</span>\n\n<span class=\"nx\">Vows</span>\n  <span class=\"p\">.</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">&#39;Lidoc parser&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">addBatch</span>\n    <span class=\"s1\">&#39;Parsing the fixture&#39;</span><span class=\"o\">:</span>\n      <span class=\"nv\">topic: </span><span class=\"o\">-&gt;</span>\n        <span class=\"nx\">Lidoc</span><span class=\"p\">.</span><span class=\"nx\">parse</span> <span class=\"nv\">files: </span><span class=\"nx\">files</span><span class=\"p\">,</span> <span class=\"nv\">quiet: </span><span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n          <span class=\"err\">@</span><span class=\"nx\">callback</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">project</span>\n\n      <span class=\"s1\">&#39;should have pages&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n        <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isObject</span> <span class=\"nx\">project</span><span class=\"p\">.</span><span class=\"nx\">pages</span>\n\n      <span class=\"s1\">&#39;should have files&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n        <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isObject</span> <span class=\"nx\">project</span><span class=\"p\">.</span><span class=\"nx\">files</span>\n\n      <span class=\"s1\">&#39;README&#39;</span><span class=\"o\">:</span>\n        <span class=\"nv\">topic: </span><span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">project</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">[</span><span class=\"s1\">&#39;test/fixture/README.md&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"s1\">&#39;should have an index.html&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">readme</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">readme</span><span class=\"p\">.</span><span class=\"nx\">htmlFile</span><span class=\"p\">,</span> <span class=\"s1\">&#39;index.html&#39;</span>\n\n        <span class=\"s1\">&#39;should have the right sourceFile&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">readme</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">readme</span><span class=\"p\">.</span><span class=\"nx\">sourceFile</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test/fixture/README.md&#39;</span>\n\n        <span class=\"s1\">&#39;should have the correct number of sections&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">readme</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">readme</span><span class=\"p\">.</span><span class=\"nx\">sections</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">,</span> <span class=\"mi\">3</span>\n\n      <span class=\"s1\">&#39;parser.js&#39;</span><span class=\"o\">:</span>\n        <span class=\"nv\">topic: </span><span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">project</span><span class=\"p\">.</span><span class=\"nx\">files</span><span class=\"p\">[</span><span class=\"s1\">&#39;test/fixture/parser.js&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"s1\">&#39;should have the right attributes&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">htmlFile</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test/fixture/parser.html&#39;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">sourceFile</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test/fixture/parser.js&#39;</span>\n\n        <span class=\"s1\">&#39;should have a main heading&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">mainHeading</span><span class=\"p\">.</span><span class=\"nx\">level</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">mainHeading</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parser object&#39;</span>\n\n        <span class=\"s1\">&#39;sections should have something&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isArray</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">sections</span>\n          <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">sections</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">section</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isString</span> <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">docsHtml</span>\n            <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isString</span> <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">codeHtml</span>\n            <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isString</span> <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">docsText</span>\n            <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isString</span> <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">codeText</span>\n\n        <span class=\"s1\">&#39;sections should have anchors&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">sections</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">anchor</span><span class=\"p\">,</span> <span class=\"s1\">&#39;Parser-object&#39;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">sections</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">anchor</span><span class=\"p\">,</span> <span class=\"s1\">&#39;parse&#39;</span>\n\n        <span class=\"s1\">&#39;sections should have headings&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">sections</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">section</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">isArray</span> <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">headings</span>\n            <span class=\"nx\">assert</span> <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">headings</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n\n        <span class=\"s1\">&#39;sections should have rendered&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">sections</span><span class=\"p\">.</span><span class=\"nx\">forEach</span> <span class=\"p\">(</span><span class=\"nx\">section</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n            <span class=\"nx\">assert</span> <span class=\"nx\">section</span><span class=\"p\">.</span><span class=\"nx\">docsHtml</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n\n  <span class=\"p\">.</span><span class=\"nx\">export</span><span class=\"p\">(</span><span class=\"nx\">module</span><span class=\"p\">)</span>\n\n</pre></div>",
          "anchor": "section-0",
          "headings": []
        }
      ],
      "headings": [],
      "sourceFile": "test/parser_test.coffee",
      "baseSourceFile": "parser_test.coffee"
    },
    "test/tree_test.coffee": {
      "htmlFile": "test/tree_test.html",
      "sourceName": null,
      "extension": "coffee",
      "baseSourceName": null,
      "baseHtmlFile": "tree_test.html",
      "sections": [
        {
          "docsText": "",
          "codeText": "require \"test/env\"\nLidoc = require \"lib/lidoc\"\n\nfiles = [\n  'test/fixture/README.md',\n  'test/fixture/parser.js',\n  'test/fixture/actor.js'\n]\n\nVows\n  .describe('Lidoc parser')\n  .addBatch\n    'tree':\n      topic: ->\n        Lidoc.parse files: files, quiet: true, (project) =>\n          @callback null, project.fileTree\n\n      'should be the right type': (tree) ->\n        assert.equal tree.constructor, require(\"lib/lidoc/filetree\")\n\n      'paths':\n        './': (tree) ->\n          assert.equal tree.name, ''\n\n        './test/': (tree) ->\n          assert.equal tree.paths['test'].name, 'test'\n\n        './test/fixture/': (tree) ->\n          assert.equal tree.paths['test'].paths['fixture'].name, 'fixture'\n\n        './test/fixture/parser.html': (tree) ->\n          node = tree.paths['test'].paths['fixture'].paths['parser.html']\n          assert.equal node.file, 'test/fixture/parser.html'\n\n      'ensure sorted': (tree) ->\n        folder = tree.paths['test'].paths['fixture']\n\n        names = []\n        for name, file of folder.paths\n          names.push name\n\n        assert.equal names.join(\",\"), [\"actor.html\",\"parser.html\"]\n\n  .export(module)\n\n",
          "docsHtml": "",
          "codeHtml": "<div class=\"highlight\"><pre><span class=\"nx\">require</span> <span class=\"s2\">&quot;test/env&quot;</span>\n<span class=\"nx\">Lidoc</span> <span class=\"o\">=</span> <span class=\"nx\">require</span> <span class=\"s2\">&quot;lib/lidoc&quot;</span>\n\n<span class=\"nx\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n  <span class=\"s1\">&#39;test/fixture/README.md&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;test/fixture/parser.js&#39;</span><span class=\"p\">,</span>\n  <span class=\"s1\">&#39;test/fixture/actor.js&#39;</span>\n<span class=\"p\">]</span>\n\n<span class=\"nx\">Vows</span>\n  <span class=\"p\">.</span><span class=\"nx\">describe</span><span class=\"p\">(</span><span class=\"s1\">&#39;Lidoc parser&#39;</span><span class=\"p\">)</span>\n  <span class=\"p\">.</span><span class=\"nx\">addBatch</span>\n    <span class=\"s1\">&#39;tree&#39;</span><span class=\"o\">:</span>\n      <span class=\"nv\">topic: </span><span class=\"o\">-&gt;</span>\n        <span class=\"nx\">Lidoc</span><span class=\"p\">.</span><span class=\"nx\">parse</span> <span class=\"nv\">files: </span><span class=\"nx\">files</span><span class=\"p\">,</span> <span class=\"nv\">quiet: </span><span class=\"kc\">true</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">project</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span>\n          <span class=\"err\">@</span><span class=\"nx\">callback</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"nx\">project</span><span class=\"p\">.</span><span class=\"nx\">fileTree</span>\n\n      <span class=\"s1\">&#39;should be the right type&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">tree</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n        <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">tree</span><span class=\"p\">.</span><span class=\"nx\">constructor</span><span class=\"p\">,</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s2\">&quot;lib/lidoc/filetree&quot;</span><span class=\"p\">)</span>\n\n      <span class=\"s1\">&#39;paths&#39;</span><span class=\"o\">:</span>\n        <span class=\"s1\">&#39;./&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">tree</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">tree</span><span class=\"p\">.</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&#39;</span>\n\n        <span class=\"s1\">&#39;./test/&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">tree</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">tree</span><span class=\"p\">.</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">].</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test&#39;</span>\n\n        <span class=\"s1\">&#39;./test/fixture/&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">tree</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">tree</span><span class=\"p\">.</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">].</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"s1\">&#39;fixture&#39;</span><span class=\"p\">].</span><span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"s1\">&#39;fixture&#39;</span>\n\n        <span class=\"s1\">&#39;./test/fixture/parser.html&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">tree</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n          <span class=\"nx\">node</span> <span class=\"o\">=</span> <span class=\"nx\">tree</span><span class=\"p\">.</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">].</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"s1\">&#39;fixture&#39;</span><span class=\"p\">].</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"s1\">&#39;parser.html&#39;</span><span class=\"p\">]</span>\n          <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">node</span><span class=\"p\">.</span><span class=\"nx\">file</span><span class=\"p\">,</span> <span class=\"s1\">&#39;test/fixture/parser.html&#39;</span>\n\n      <span class=\"s1\">&#39;ensure sorted&#39;</span><span class=\"o\">:</span> <span class=\"p\">(</span><span class=\"nx\">tree</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n        <span class=\"nx\">folder</span> <span class=\"o\">=</span> <span class=\"nx\">tree</span><span class=\"p\">.</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"s1\">&#39;test&#39;</span><span class=\"p\">].</span><span class=\"nx\">paths</span><span class=\"p\">[</span><span class=\"s1\">&#39;fixture&#39;</span><span class=\"p\">]</span>\n\n        <span class=\"nx\">names</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"nx\">name</span><span class=\"p\">,</span> <span class=\"nx\">file</span> <span class=\"k\">of</span> <span class=\"nx\">folder</span><span class=\"p\">.</span><span class=\"nx\">paths</span>\n          <span class=\"nx\">names</span><span class=\"p\">.</span><span class=\"nx\">push</span> <span class=\"nx\">name</span>\n\n        <span class=\"nx\">assert</span><span class=\"p\">.</span><span class=\"nx\">equal</span> <span class=\"nx\">names</span><span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"s2\">&quot;actor.html&quot;</span><span class=\"p\">,</span><span class=\"s2\">&quot;parser.html&quot;</span><span class=\"p\">]</span>\n\n  <span class=\"p\">.</span><span class=\"nx\">export</span><span class=\"p\">(</span><span class=\"nx\">module</span><span class=\"p\">)</span>\n\n</pre></div>",
          "anchor": "section-0",
          "headings": []
        }
      ],
      "headings": [],
      "sourceFile": "test/tree_test.coffee",
      "baseSourceFile": "tree_test.coffee"
    }
  },
  "fileTree": {
    "name": "",
    "file": null,
    "paths": {
      "TODO.html": {
        "name": "TODO.html",
        "file": "TODO.html",
        "paths": {}
      },
      "index.html": {
        "name": "index.html",
        "file": "index.html",
        "paths": {}
      },
      "lib": {
        "name": "lib",
        "file": null,
        "paths": {
          "lidoc": {
            "name": "lidoc",
            "file": null,
            "paths": {
              "builder.html": {
                "name": "builder.html",
                "file": "lib/lidoc/builder.html",
                "paths": {}
              },
              "command.html": {
                "name": "command.html",
                "file": "lib/lidoc/command.html",
                "paths": {}
              },
              "filetree.html": {
                "name": "filetree.html",
                "file": "lib/lidoc/filetree.html",
                "paths": {}
              },
              "helpers.html": {
                "name": "helpers.html",
                "file": "lib/lidoc/helpers.html",
                "paths": {}
              },
              "languages.html": {
                "name": "languages.html",
                "file": "lib/lidoc/languages.html",
                "paths": {}
              },
              "parser.html": {
                "name": "parser.html",
                "file": "lib/lidoc/parser.html",
                "paths": {}
              },
              "structs.html": {
                "name": "structs.html",
                "file": "lib/lidoc/structs.html",
                "paths": {}
              }
            }
          },
          "lidoc.html": {
            "name": "lidoc.html",
            "file": "lib/lidoc.html",
            "paths": {}
          }
        }
      },
      "manual": {
        "name": "manual",
        "file": null,
        "paths": {
          "guides.html": {
            "name": "guides.html",
            "file": "manual/guides.html",
            "paths": {}
          }
        }
      },
      "test": {
        "name": "test",
        "file": null,
        "paths": {
          "build_test.html": {
            "name": "build_test.html",
            "file": "test/build_test.html",
            "paths": {}
          },
          "env.html": {
            "name": "env.html",
            "file": "test/env.html",
            "paths": {}
          },
          "lidoc_test.html": {
            "name": "lidoc_test.html",
            "file": "test/lidoc_test.html",
            "paths": {}
          },
          "parser_test.html": {
            "name": "parser_test.html",
            "file": "test/parser_test.html",
            "paths": {}
          },
          "tree_test.html": {
            "name": "tree_test.html",
            "file": "test/tree_test.html",
            "paths": {}
          }
        }
      }
    }
  }
}